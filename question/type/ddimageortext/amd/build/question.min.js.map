{"version":3,"file":"question.min.js","sources":["../src/question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/*\r\n * JavaScript to allow dragging options to slots (using mouse down or touch) or tab through slots using keyboard.\r\n *\r\n * @module     qtype_ddimageortext/question\r\n * @copyright  2018 The Open University\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine([\r\n    'jquery',\r\n    'core/dragdrop',\r\n    'core/key_codes',\r\n    'core_form/changechecker',\r\n    'core_filters/events',\r\n], function(\r\n    $,\r\n    dragDrop,\r\n    keys,\r\n    FormChangeChecker,\r\n    filterEvent\r\n) {\r\n\r\n    \"use strict\";\r\n\r\n    /**\r\n     * Initialise one drag-drop onto image question.\r\n     *\r\n     * @param {String} containerId id of the outer div for this question.\r\n     * @param {boolean} readOnly whether the question is being displayed read-only.\r\n     * @param {Array} places Information about the drop places.\r\n     * @constructor\r\n     */\r\n    function DragDropOntoImageQuestion(containerId, readOnly, places) {\r\n        this.containerId = containerId;\r\n        this.questionAnswer = {};\r\n        this.questionDragDropWidthHeight = [];\r\n        M.util.js_pending('qtype_ddimageortext-init-' + this.containerId);\r\n        this.places = places;\r\n        this.allImagesLoaded = false;\r\n        this.imageLoadingTimeoutId = null;\r\n        this.isPrinting = false;\r\n        if (readOnly) {\r\n            this.getRoot().addClass('qtype_ddimageortext-readonly');\r\n        }\r\n\r\n        var thisQ = this;\r\n        this.getNotYetLoadedImages().one('load', function() {\r\n            thisQ.waitForAllImagesToBeLoaded();\r\n        });\r\n        this.waitForAllImagesToBeLoaded();\r\n        // Wait for all dynamic content loaded by filter to be completed.\r\n        document.addEventListener(filterEvent.eventTypes.filterContentRenderingComplete, (elements) => {\r\n            elements.detail.nodes.forEach((element) => {\r\n                thisQ.changeAllDragsAndDropsToFilteredContent(element);\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Change all the drags and drops related to the item that has been changed by filter to correct size and content.\r\n     *\r\n     *  @param {object} filteredElement the element has been modified by filter.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.changeAllDragsAndDropsToFilteredContent = function(filteredElement) {\r\n        let currentFilteredItem = $(filteredElement);\r\n        const parentIsDD = currentFilteredItem.parent().closest('div').hasClass('placed') ||\r\n            currentFilteredItem.parent().hasClass('draghome');\r\n        const isDD = currentFilteredItem.hasClass('placed') || currentFilteredItem.hasClass('draghome');\r\n        // The filtered element or parent element should a drag or drop item.\r\n        if (!parentIsDD && !isDD) {\r\n            return;\r\n        }\r\n        if (parentIsDD) {\r\n            currentFilteredItem = currentFilteredItem.parent().closest('div');\r\n        }\r\n        if (this.getRoot().find(currentFilteredItem).length <= 0) {\r\n            // If the DD item doesn't belong to this question\r\n            // In case we have multiple questions in the same page.\r\n            return;\r\n        }\r\n        const group = this.getGroup(currentFilteredItem),\r\n            choice = this.getChoice(currentFilteredItem);\r\n        let listOfModifiedDragDrop = [];\r\n\r\n        // Get the list of drag and drop item within the same group and choice.\r\n        this.getRoot().find('.group' + group + '.choice' + choice).each(function(i, node) {\r\n            // Same modified item, skip it.\r\n            if ($(node).get(0) === currentFilteredItem.get(0)) {\r\n                return;\r\n            }\r\n            const originalClass = $(node).attr('class');\r\n            // We want to keep all the handler and event for filtered item, so using clone is the only choice.\r\n            const filteredDragDropClone = currentFilteredItem.clone();\r\n            // Replace the class of the drag drop item we want to replace for the clone.\r\n            filteredDragDropClone.attr('class', originalClass);\r\n            // Insert into DOM.\r\n            $(node).before(filteredDragDropClone);\r\n            // Add the item has been replaced to a list so we can remove it later.\r\n            listOfModifiedDragDrop.push(node);\r\n        });\r\n\r\n        listOfModifiedDragDrop.forEach(function(node) {\r\n            $(node).remove();\r\n        });\r\n        // Save the current height and width.\r\n        const currentHeight = currentFilteredItem.height();\r\n        const currentWidth = currentFilteredItem.width();\r\n        // Set to auto, so we can get the real height and width of the filtered item.\r\n        currentFilteredItem.height('auto');\r\n        currentFilteredItem.width('auto');\r\n        if (this.questionDragDropWidthHeight[group].maxWidth < Math.ceil(filteredElement.offsetWidth) ||\r\n            this.questionDragDropWidthHeight[group].maxHeight < Math.ceil(0 + filteredElement.offsetHeight)) {\r\n            // Now resize all the items in the same group if we have new maximum width or height.\r\n            this.resizeAllDragsAndDropsInGroup(group);\r\n        } else {\r\n            currentFilteredItem.height(currentHeight);\r\n            currentFilteredItem.width(currentWidth);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Waits until all images are loaded before calling setupQuestion().\r\n     *\r\n     * This function is called from the onLoad of each image, and also polls with\r\n     * a time-out, because image on-loads are allegedly unreliable.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.waitForAllImagesToBeLoaded = function() {\r\n        var thisQ = this;\r\n\r\n        // This method may get called multiple times (via image on-loads or timeouts.\r\n        // If we are already done, don't do it again.\r\n        if (this.allImagesLoaded) {\r\n            return;\r\n        }\r\n\r\n        // Clear any current timeout, if set.\r\n        if (this.imageLoadingTimeoutId !== null) {\r\n            clearTimeout(this.imageLoadingTimeoutId);\r\n        }\r\n\r\n        // If we have not yet loaded all images, set a timeout to\r\n        // call ourselves again, since apparently images on-load\r\n        // events are flakey.\r\n        if (this.getNotYetLoadedImages().length > 0) {\r\n            this.imageLoadingTimeoutId = setTimeout(function() {\r\n                thisQ.waitForAllImagesToBeLoaded();\r\n            }, 100);\r\n            return;\r\n        }\r\n\r\n        // We now have all images. Carry on, but only after giving the layout a chance to settle down.\r\n        this.allImagesLoaded = true;\r\n        thisQ.setupQuestion();\r\n    };\r\n\r\n    /**\r\n     * Get any of the images in the drag-drop area that are not yet fully loaded.\r\n     *\r\n     * @returns {jQuery} those images.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getNotYetLoadedImages = function() {\r\n        var thisQ = this;\r\n        return this.getRoot().find('.ddarea img').not(function(i, imgNode) {\r\n            return thisQ.imageIsLoaded(imgNode);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Check if an image has loaded without errors.\r\n     *\r\n     * @param {HTMLImageElement} imgElement an image.\r\n     * @returns {boolean} true if this image has loaded without errors.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.imageIsLoaded = function(imgElement) {\r\n        return imgElement.complete && imgElement.naturalHeight !== 0;\r\n    };\r\n\r\n    /**\r\n     * Set up the question, once all images have been loaded.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.setupQuestion = function() {\r\n        this.resizeAllDragsAndDrops();\r\n        this.cloneDrags();\r\n        this.positionDragsAndDrops();\r\n        M.util.js_complete('qtype_ddimageortext-init-' + this.containerId);\r\n    };\r\n\r\n    /**\r\n     * In each group, resize all the items to be the same size.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDrops = function() {\r\n        var thisQ = this;\r\n        this.getRoot().find('.draghomes > div').each(function(i, node) {\r\n            thisQ.resizeAllDragsAndDropsInGroup(\r\n                thisQ.getClassnameNumericSuffix($(node), 'dragitemgroup'));\r\n        });\r\n    };\r\n\r\n    /**\r\n     * In a given group, set all the drags and drops to be the same size.\r\n     *\r\n     * @param {int} group the group number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.resizeAllDragsAndDropsInGroup = function(group) {\r\n        var root = this.getRoot(),\r\n            dragHomes = root.find(\"div.group\" + group),\r\n            maxWidth = 0,\r\n            maxHeight = 0;\r\n\r\n        // Find the maximum size of any drag in this groups.\r\n        dragHomes.each(function(i, drag) {\r\n            maxWidth = Math.max(maxWidth, Math.ceil(drag.offsetWidth));\r\n            maxHeight = Math.max(maxHeight, Math.ceil(drag.offsetHeight));\r\n        });\r\n\r\n        // The size we will want to set is a bit bigger than this.\r\n        maxWidth += 10;\r\n        maxHeight += 10;\r\n        this.questionDragDropWidthHeight[group] = {maxWidth, maxHeight};\r\n\r\n        // Set each drag home to that size.\r\n        dragHomes.each(function(i, drag) {\r\n            $(drag).width(maxWidth).height(maxHeight).css('lineHeight', maxHeight + 'px');\r\n        });\r\n\r\n        // Create the drops and make them the right size.\r\n        for (var i in this.places) {\r\n            if (!this.places.hasOwnProperty((i))) {\r\n                continue;\r\n            }\r\n            var place = this.places[i],\r\n                label = place.text;\r\n            if (parseInt(place.group) !== group) {\r\n                continue;\r\n            }\r\n            if (label === '') {\r\n                label = M.util.get_string('blank', 'qtype_ddimageortext');\r\n            }\r\n            if (root.find('.dropzones .dropzone.group' + place.group + '.place' + i).length === 0) {\r\n                root.find('.dropzones').append('<div class=\"dropzone active group' + place.group +\r\n                    ' place' + i + '\" tabindex=\"0\">' +\r\n                    '<span class=\"accesshide\">' + label + '</span>&nbsp;</div>');\r\n            }\r\n            root.find('.dropzone.place' + i).width(maxWidth - 2).height(maxHeight - 2);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Invisible 'drag homes' are output by the renderer. These have the same properties\r\n     * as the drag items but are invisible. We clone these invisible elements to make the\r\n     * actual drag items.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDrags = function() {\r\n        var thisQ = this;\r\n        thisQ.getRoot().find('.draghome').each(function(index, dragHome) {\r\n            var drag = $(dragHome);\r\n            var placeHolder = drag.clone();\r\n            placeHolder.removeClass();\r\n            placeHolder.addClass('draghome choice' +\r\n                thisQ.getChoice(drag) + ' group' +\r\n                thisQ.getGroup(drag) + ' dragplaceholder');\r\n            drag.before(placeHolder);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Clone drag item for one choice.\r\n     *\r\n     * @param {jQuery} dragHome the drag home to clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDragsForOneChoice = function(dragHome) {\r\n        if (dragHome.hasClass('infinite')) {\r\n            var noOfDrags = this.noOfDropsInGroup(this.getGroup(dragHome));\r\n            for (var i = 0; i < noOfDrags; i++) {\r\n                this.cloneDrag(dragHome);\r\n            }\r\n        } else {\r\n            this.cloneDrag(dragHome);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Clone drag item.\r\n     *\r\n     * @param {jQuery} dragHome\r\n     */\r\n    DragDropOntoImageQuestion.prototype.cloneDrag = function(dragHome) {\r\n        var drag = dragHome.clone();\r\n        drag.removeClass('draghome')\r\n            .addClass('drag unplaced moodle-has-zindex')\r\n            .offset(dragHome.offset());\r\n        this.getRoot().find('.dragitems').append(drag);\r\n    };\r\n\r\n    /**\r\n     * Update the position of drags.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.positionDragsAndDrops = function() {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            bgRatio = this.bgRatio();\r\n\r\n        // Move the drops into position.\r\n        root.find('.ddarea .dropzone').each(function(i, dropNode) {\r\n            var drop = $(dropNode),\r\n                place = thisQ.places[thisQ.getPlace(drop)];\r\n            // The xy values come from PHP as strings, so we need parseInt to stop JS doing string concatenation.\r\n            drop.css('left', parseInt(place.xy[0]) * bgRatio)\r\n                .css('top', parseInt(place.xy[1]) * bgRatio);\r\n            drop.data('originX', parseInt(place.xy[0]))\r\n                .data('originY', parseInt(place.xy[1]));\r\n            thisQ.handleElementScale(drop, 'left top');\r\n        });\r\n\r\n        // First move all items back home.\r\n        root.find('.draghome').not('.dragplaceholder').each(function(i, dragNode) {\r\n            var drag = $(dragNode),\r\n                currentPlace = thisQ.getClassnameNumericSuffix(drag, 'inplace');\r\n            drag.addClass('unplaced')\r\n                .removeClass('placed');\r\n            drag.removeAttr('tabindex');\r\n            if (currentPlace !== null) {\r\n                drag.removeClass('inplace' + currentPlace);\r\n            }\r\n        });\r\n\r\n        // Then place the ones that should be placed.\r\n        root.find('input.placeinput').each(function(i, inputNode) {\r\n            var input = $(inputNode),\r\n                choice = input.val();\r\n            if (choice.length === 0 || (choice.length > 0 && choice === '0')) {\r\n                // No item in this place.\r\n                return;\r\n            }\r\n\r\n            var place = thisQ.getPlace(input);\r\n            // Get the unplaced drag.\r\n            var unplacedDrag = thisQ.getUnplacedChoice(thisQ.getGroup(input), choice);\r\n            // Get the clone of the drag.\r\n            var hiddenDrag = thisQ.getDragClone(unplacedDrag);\r\n            if (hiddenDrag.length) {\r\n                if (unplacedDrag.hasClass('infinite')) {\r\n                    var noOfDrags = thisQ.noOfDropsInGroup(thisQ.getGroup(unplacedDrag));\r\n                    var cloneDrags = thisQ.getInfiniteDragClones(unplacedDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = unplacedDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        // Sometimes, for the question that has a lot of input groups and unlimited draggable items,\r\n                        // this 'clone' process takes longer than usual, so the questionManager.init() method\r\n                        // will not add the eventHandler for this cloned drag.\r\n                        // We need to make sure to add the eventHandler for the cloned drag too.\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                }\r\n            }\r\n\r\n            // Send the drag to drop.\r\n            var drop = root.find('.dropzone.place' + place);\r\n            thisQ.sendDragToDrop(unplacedDrag, drop);\r\n        });\r\n\r\n        // Save the question answer.\r\n        thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n    };\r\n\r\n    /**\r\n     * Get the question answered values.\r\n     *\r\n     * @return {Object} Contain key-value with key is the input id and value is the input value.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getQuestionAnsweredValues = function() {\r\n        let result = {};\r\n        this.getRoot().find('input.placeinput').each((i, inputNode) => {\r\n            result[inputNode.id] = inputNode.value;\r\n        });\r\n\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Check if the question is being interacted or not.\r\n     *\r\n     * @return {boolean} Return true if the user has changed the question-answer.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isQuestionInteracted = function() {\r\n        const oldAnswer = this.questionAnswer;\r\n        const newAnswer = this.getQuestionAnsweredValues();\r\n        let isInteracted = false;\r\n\r\n        // First, check both answers have the same structure or not.\r\n        if (JSON.stringify(newAnswer) !== JSON.stringify(oldAnswer)) {\r\n            isInteracted = true;\r\n            return isInteracted;\r\n        }\r\n        // Check the values.\r\n        Object.keys(newAnswer).forEach(key => {\r\n            if (newAnswer[key] !== oldAnswer[key]) {\r\n                isInteracted = true;\r\n            }\r\n        });\r\n\r\n        return isInteracted;\r\n    };\r\n\r\n    /**\r\n     * Handles the start of dragging an item.\r\n     *\r\n     * @param {Event} e the touch start or mouse down event.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleDragStart = function(e) {\r\n        var thisQ = this,\r\n            drag = $(e.target).closest('.draghome'),\r\n            currentIndex = this.calculateZIndex(),\r\n            newIndex = currentIndex + 2;\r\n\r\n        var info = dragDrop.prepare(e);\r\n        if (!info.start || drag.hasClass('beingdragged')) {\r\n            return;\r\n        }\r\n\r\n        drag.addClass('beingdragged').css('transform', '').css('z-index', newIndex);\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            this.setInputValue(currentPlace, 0);\r\n            drag.removeClass('inplace' + currentPlace);\r\n            var hiddenDrop = thisQ.getDrop(drag, currentPlace);\r\n            if (hiddenDrop.length) {\r\n                hiddenDrop.addClass('active');\r\n                drag.offset(hiddenDrop.offset());\r\n            }\r\n        } else {\r\n            var hiddenDrag = thisQ.getDragClone(drag);\r\n            if (hiddenDrag.length) {\r\n                if (drag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(thisQ.getGroup(drag));\r\n                    var cloneDrags = this.getInfiniteDragClones(drag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = drag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        drag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        drag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    drag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        }\r\n\r\n        dragDrop.start(e, drag, function(x, y, drag) {\r\n            thisQ.dragMove(x, y, drag);\r\n        }, function(x, y, drag) {\r\n            thisQ.dragEnd(x, y, drag);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called whenever the currently dragged items moves.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.dragMove = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            highlighted = false;\r\n        this.getRoot().find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted) {\r\n                highlighted = true;\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n        this.getRoot().find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (thisQ.isPointInDrop(pageX, pageY, drop) && !highlighted && !thisQ.isDragSameAsDrop(drag, drop)) {\r\n                highlighted = true;\r\n                drop.addClass('valid-drag-over-drop');\r\n            } else {\r\n                drop.removeClass('valid-drag-over-drop');\r\n            }\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Called when user drops a drag item.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.dragEnd = function(pageX, pageY, drag) {\r\n        var thisQ = this,\r\n            root = this.getRoot(),\r\n            placed = false;\r\n\r\n        // Looking for drag that was dropped on a dropzone.\r\n        root.find('.dropzone.group' + this.getGroup(drag)).each(function(i, dropNode) {\r\n            var drop = $(dropNode);\r\n            if (!thisQ.isPointInDrop(pageX, pageY, drop)) {\r\n                // Not this drop.\r\n                return true;\r\n            }\r\n\r\n            // Now put this drag into the drop.\r\n            drop.removeClass('valid-drag-over-drop');\r\n            thisQ.sendDragToDrop(drag, drop);\r\n            placed = true;\r\n            return false; // Stop the each() here.\r\n        });\r\n\r\n        if (!placed) {\r\n            // Looking for drag that was dropped on a placed drag.\r\n            root.find('.draghome.placed.group' + this.getGroup(drag)).not('.beingdragged').each(function(i, placedNode) {\r\n                var placedDrag = $(placedNode);\r\n                if (!thisQ.isPointInDrop(pageX, pageY, placedDrag) || thisQ.isDragSameAsDrop(drag, placedDrag)) {\r\n                    // Not this placed drag.\r\n                    return true;\r\n                }\r\n\r\n                // Now put this drag into the drop.\r\n                placedDrag.removeClass('valid-drag-over-drop');\r\n                var currentPlace = thisQ.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n                var drop = thisQ.getDrop(drag, currentPlace);\r\n                thisQ.sendDragToDrop(drag, drop);\r\n                placed = true;\r\n                return false; // Stop the each() here.\r\n            });\r\n        }\r\n\r\n        if (!placed) {\r\n            this.sendDragHome(drag);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag item into a given place (or back home).\r\n     *\r\n     * @param {jQuery|null} drag the item to place. If null, clear the place.\r\n     * @param {jQuery} drop the place to put it.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.sendDragToDrop = function(drag, drop) {\r\n        // Is there already a drag in this drop? if so, evict it.\r\n        var oldDrag = this.getCurrentDragInPlace(this.getPlace(drop));\r\n        if (oldDrag.length !== 0) {\r\n            oldDrag.addClass('beingdragged');\r\n            oldDrag.offset(oldDrag.offset());\r\n            var currentPlace = this.getClassnameNumericSuffix(oldDrag, 'inplace');\r\n            var hiddenDrop = this.getDrop(oldDrag, currentPlace);\r\n            hiddenDrop.addClass('active');\r\n            this.sendDragHome(oldDrag);\r\n        }\r\n\r\n        if (drag.length === 0) {\r\n            this.setInputValue(this.getPlace(drop), 0);\r\n            if (drop.data('isfocus')) {\r\n                drop.focus();\r\n            }\r\n        } else {\r\n            this.setInputValue(this.getPlace(drop), this.getChoice(drag));\r\n            drag.removeClass('unplaced')\r\n                .addClass('placed inplace' + this.getPlace(drop));\r\n            drag.attr('tabindex', 0);\r\n            this.animateTo(drag, drop);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Animate a drag back to its home.\r\n     *\r\n     * @param {jQuery} drag the item being moved.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.sendDragHome = function(drag) {\r\n        var currentPlace = this.getClassnameNumericSuffix(drag, 'inplace');\r\n        if (currentPlace !== null) {\r\n            drag.removeClass('inplace' + currentPlace);\r\n        }\r\n        drag.data('unplaced', true);\r\n\r\n        this.animateTo(drag, this.getDragHome(this.getGroup(drag), this.getChoice(drag)));\r\n    };\r\n\r\n    /**\r\n     * Handles keyboard events on drops.\r\n     *\r\n     * Drops are focusable. Once focused, right/down/space switches to the next choice, and\r\n     * left/up switches to the previous. Escape clear.\r\n     *\r\n     * @param {KeyboardEvent} e\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleKeyPress = function(e) {\r\n        var drop = $(e.target).closest('.dropzone');\r\n        if (drop.length === 0) {\r\n            var placedDrag = $(e.target);\r\n            var currentPlace = this.getClassnameNumericSuffix(placedDrag, 'inplace');\r\n            if (currentPlace !== null) {\r\n                drop = this.getDrop(placedDrag, currentPlace);\r\n            }\r\n        }\r\n        var currentDrag = this.getCurrentDragInPlace(this.getPlace(drop)),\r\n            nextDrag = $();\r\n\r\n        switch (e.keyCode) {\r\n            case keys.space:\r\n            case keys.arrowRight:\r\n            case keys.arrowDown:\r\n                nextDrag = this.getNextDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.arrowLeft:\r\n            case keys.arrowUp:\r\n                nextDrag = this.getPreviousDrag(this.getGroup(drop), currentDrag);\r\n                break;\r\n\r\n            case keys.escape:\r\n                questionManager.isKeyboardNavigation = false;\r\n                break;\r\n\r\n            default:\r\n                questionManager.isKeyboardNavigation = false;\r\n                return; // To avoid the preventDefault below.\r\n        }\r\n\r\n        if (nextDrag.length) {\r\n            nextDrag.data('isfocus', true);\r\n            nextDrag.addClass('beingdragged');\r\n            var hiddenDrag = this.getDragClone(nextDrag);\r\n            if (hiddenDrag.length) {\r\n                if (nextDrag.hasClass('infinite')) {\r\n                    var noOfDrags = this.noOfDropsInGroup(this.getGroup(nextDrag));\r\n                    var cloneDrags = this.getInfiniteDragClones(nextDrag, false);\r\n                    if (cloneDrags.length < noOfDrags) {\r\n                        var cloneDrag = nextDrag.clone();\r\n                        cloneDrag.removeClass('beingdragged');\r\n                        cloneDrag.removeAttr('tabindex');\r\n                        hiddenDrag.after(cloneDrag);\r\n                        questionManager.addEventHandlersToDrag(cloneDrag);\r\n                        nextDrag.offset(cloneDrag.offset());\r\n                    } else {\r\n                        hiddenDrag.addClass('active');\r\n                        nextDrag.offset(hiddenDrag.offset());\r\n                    }\r\n                } else {\r\n                    hiddenDrag.addClass('active');\r\n                    nextDrag.offset(hiddenDrag.offset());\r\n                }\r\n            }\r\n        } else {\r\n            drop.data('isfocus', true);\r\n        }\r\n\r\n        e.preventDefault();\r\n        this.sendDragToDrop(nextDrag, drop);\r\n    };\r\n\r\n    /**\r\n     * Choose the next drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getNextDrag = function(group, drag) {\r\n        var choice,\r\n            numChoices = this.noOfChoicesInGroup(group);\r\n\r\n        if (drag.length === 0) {\r\n            choice = 1; // Was empty, so we want to select the first choice.\r\n        } else {\r\n            choice = this.getChoice(drag) + 1;\r\n        }\r\n\r\n        var next = this.getUnplacedChoice(group, choice);\r\n        while (next.length === 0 && choice < numChoices) {\r\n            choice++;\r\n            next = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        return next;\r\n    };\r\n\r\n    /**\r\n     * Choose the previous drag in a group.\r\n     *\r\n     * @param {int} group which group.\r\n     * @param {jQuery} drag current choice (empty jQuery if there isn't one).\r\n     * @return {jQuery} the next drag in that group, or null if there wasn't one.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getPreviousDrag = function(group, drag) {\r\n        var choice;\r\n\r\n        if (drag.length === 0) {\r\n            choice = this.noOfChoicesInGroup(group);\r\n        } else {\r\n            choice = this.getChoice(drag) - 1;\r\n        }\r\n\r\n        var previous = this.getUnplacedChoice(group, choice);\r\n        while (previous.length === 0 && choice > 1) {\r\n            choice--;\r\n            previous = this.getUnplacedChoice(group, choice);\r\n        }\r\n\r\n        // Does this choice exist?\r\n        return previous;\r\n    };\r\n\r\n    /**\r\n     * Animate an object to the given destination.\r\n     *\r\n     * @param {jQuery} drag the element to be animated.\r\n     * @param {jQuery} target element marking the place to move it to.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.animateTo = function(drag, target) {\r\n        var currentPos = drag.offset(),\r\n            targetPos = target.offset(),\r\n            thisQ = this;\r\n\r\n        M.util.js_pending('qtype_ddimageortext-animate-' + thisQ.containerId);\r\n        // Animate works in terms of CSS position, whereas locating an object\r\n        // on the page works best with jQuery offset() function. So, to get\r\n        // the right target position, we work out the required change in\r\n        // offset() and then add that to the current CSS position.\r\n        drag.animate(\r\n            {\r\n                left: parseInt(drag.css('left')) + targetPos.left - currentPos.left,\r\n                top: parseInt(drag.css('top')) + targetPos.top - currentPos.top\r\n            },\r\n            {\r\n                duration: 'fast',\r\n                done: function() {\r\n                    $('body').trigger('qtype_ddimageortext-dragmoved', [drag, target, thisQ]);\r\n                    M.util.js_complete('qtype_ddimageortext-animate-' + thisQ.containerId);\r\n                }\r\n            }\r\n        );\r\n    };\r\n\r\n    /**\r\n     * Detect if a point is inside a given DOM node.\r\n     *\r\n     * @param {Number} pageX the x position.\r\n     * @param {Number} pageY the y position.\r\n     * @param {jQuery} drop the node to check (typically a drop).\r\n     * @return {boolean} whether the point is inside the node.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isPointInDrop = function(pageX, pageY, drop) {\r\n        var position = drop.offset();\r\n        if (drop.hasClass('draghome')) {\r\n            return pageX >= position.left && pageX < position.left + drop.outerWidth()\r\n                && pageY >= position.top && pageY < position.top + drop.outerHeight();\r\n        }\r\n        return pageX >= position.left && pageX < position.left + drop.width()\r\n            && pageY >= position.top && pageY < position.top + drop.height();\r\n    };\r\n\r\n    /**\r\n     * Set the value of the hidden input for a place, to record what is currently there.\r\n     *\r\n     * @param {int} place which place to set the input value for.\r\n     * @param {int} choice the value to set.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.setInputValue = function(place, choice) {\r\n        this.getRoot().find('input.placeinput.place' + place).val(choice);\r\n    };\r\n\r\n    /**\r\n     * Get the outer div for this question.\r\n     *\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getRoot = function() {\r\n        return $(document.getElementById(this.containerId));\r\n    };\r\n\r\n    /**\r\n     * Get the img that is the background image.\r\n     * @returns {jQuery} containing that img.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.bgImage = function() {\r\n        return this.getRoot().find('img.dropbackground');\r\n    };\r\n\r\n    /**\r\n     * Get drag home for a given choice.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} containing that div.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDragHome = function(group, choice) {\r\n        if (!this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice).is(':visible')) {\r\n            return this.getRoot().find('.dragitemgroup' + group +\r\n                ' .draghome.infinite' +\r\n                '.choice' + choice +\r\n                '.group' + group);\r\n        }\r\n        return this.getRoot().find('.draghome.dragplaceholder.group' + group + '.choice' + choice);\r\n    };\r\n\r\n    /**\r\n     * Get an unplaced choice for a particular group.\r\n     *\r\n     * @param {int} group the group.\r\n     * @param {int} choice the choice number.\r\n     * @returns {jQuery} jQuery wrapping the unplaced choice. If there isn't one, the jQuery will be empty.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getUnplacedChoice = function(group, choice) {\r\n        return this.getRoot().find('.ddarea .draghome.group' + group + '.choice' + choice + '.unplaced').slice(0, 1);\r\n    };\r\n\r\n    /**\r\n     * Get the drag that is currently in a given place.\r\n     *\r\n     * @param {int} place the place number.\r\n     * @return {jQuery} the current drag (or an empty jQuery if none).\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getCurrentDragInPlace = function(place) {\r\n        return this.getRoot().find('.ddarea .draghome.inplace' + place);\r\n    };\r\n\r\n    /**\r\n     * Return the number of blanks in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of drops.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.noOfDropsInGroup = function(group) {\r\n        return this.getRoot().find('.dropzone.group' + group).length;\r\n    };\r\n\r\n    /**\r\n     * Return the number of choices in a given group.\r\n     *\r\n     * @param {int} group the group number.\r\n     * @returns {int} the number of choices.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.noOfChoicesInGroup = function(group) {\r\n        return this.getRoot().find('.dragitemgroup' + group + ' .draghome').length;\r\n    };\r\n\r\n    /**\r\n     * Return the number at the end of the CSS class name with the given prefix.\r\n     *\r\n     * @param {jQuery} node\r\n     * @param {String} prefix name prefix\r\n     * @returns {Number|null} the suffix if found, else null.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getClassnameNumericSuffix = function(node, prefix) {\r\n        var classes = node.attr('class');\r\n        if (classes !== '') {\r\n            var classesArr = classes.split(' ');\r\n            for (var index = 0; index < classesArr.length; index++) {\r\n                var patt1 = new RegExp('^' + prefix + '([0-9])+$');\r\n                if (patt1.test(classesArr[index])) {\r\n                    var patt2 = new RegExp('([0-9])+$');\r\n                    var match = patt2.exec(classesArr[index]);\r\n                    return Number(match[0]);\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Get the choice number of a drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {Number} the choice number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getChoice = function(drag) {\r\n        return this.getClassnameNumericSuffix(drag, 'choice');\r\n    };\r\n\r\n    /**\r\n     * Given a DOM node that is significant to this question\r\n     * (drag, drop, ...) get the group it belongs to.\r\n     *\r\n     * @param {jQuery} node a DOM node.\r\n     * @returns {Number} the group it belongs to.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getGroup = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'group');\r\n    };\r\n\r\n    /**\r\n     * Get the place number of a drop, or its corresponding hidden input.\r\n     *\r\n     * @param {jQuery} node the DOM node.\r\n     * @returns {Number} the place number.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getPlace = function(node) {\r\n        return this.getClassnameNumericSuffix(node, 'place');\r\n    };\r\n\r\n    /**\r\n     * Get drag clone for a given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @returns {jQuery} the drag's clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDragClone = function(drag) {\r\n        return this.getRoot().find('.dragitemgroup' +\r\n            this.getGroup(drag) +\r\n            ' .draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get infinite drag clones for given drag.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Boolean} inHome in the home area or not.\r\n     * @returns {jQuery} the drag's clones.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getInfiniteDragClones = function(drag, inHome) {\r\n        if (inHome) {\r\n            return this.getRoot().find('.dragitemgroup' +\r\n                this.getGroup(drag) +\r\n                ' .draghome' +\r\n                '.choice' + this.getChoice(drag) +\r\n                '.group' + this.getGroup(drag) +\r\n                '.infinite').not('.dragplaceholder');\r\n        }\r\n        return this.getRoot().find('.draghome' +\r\n            '.choice' + this.getChoice(drag) +\r\n            '.group' + this.getGroup(drag) +\r\n            '.infinite').not('.dragplaceholder');\r\n    };\r\n\r\n    /**\r\n     * Get drop for a given drag and place.\r\n     *\r\n     * @param {jQuery} drag the drag.\r\n     * @param {Integer} currentPlace the current place of drag.\r\n     * @returns {jQuery} the drop's clone.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.getDrop = function(drag, currentPlace) {\r\n        return this.getRoot().find('.dropzone.group' + this.getGroup(drag) + '.place' + currentPlace);\r\n    };\r\n\r\n    /**\r\n     * Handle when the window is resized.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleResize = function() {\r\n        var thisQ = this,\r\n            bgRatio = this.bgRatio();\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n\r\n        this.getRoot().find('.ddarea .dropzone').each(function(i, dropNode) {\r\n            $(dropNode)\r\n                .css('left', parseInt($(dropNode).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseInt($(dropNode).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(dropNode, 'left top');\r\n        });\r\n\r\n        this.getRoot().find('div.droparea .draghome').not('.beingdragged').each(function(key, drag) {\r\n            $(drag)\r\n                .css('left', parseFloat($(drag).data('originX')) * parseFloat(bgRatio))\r\n                .css('top', parseFloat($(drag).data('originY')) * parseFloat(bgRatio));\r\n            thisQ.handleElementScale(drag, 'left top');\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Return the background ratio.\r\n     *\r\n     * @returns {number} Background ratio.\r\n     */\r\n    DragDropOntoImageQuestion.prototype.bgRatio = function() {\r\n        var bgImg = this.bgImage();\r\n        var bgImgNaturalWidth = bgImg.get(0).naturalWidth;\r\n        var bgImgClientWidth = bgImg.width();\r\n\r\n        return bgImgClientWidth / bgImgNaturalWidth;\r\n    };\r\n\r\n    /**\r\n     * Scale the drag if needed.\r\n     *\r\n     * @param {jQuery} element the item to place.\r\n     * @param {String} type scaling type\r\n     */\r\n    DragDropOntoImageQuestion.prototype.handleElementScale = function(element, type) {\r\n        var bgRatio = parseFloat(this.bgRatio());\r\n        if (this.isPrinting) {\r\n            bgRatio = 1;\r\n        }\r\n        $(element).css({\r\n            '-webkit-transform': 'scale(' + bgRatio + ')',\r\n            '-moz-transform': 'scale(' + bgRatio + ')',\r\n            '-ms-transform': 'scale(' + bgRatio + ')',\r\n            '-o-transform': 'scale(' + bgRatio + ')',\r\n            'transform': 'scale(' + bgRatio + ')',\r\n            'transform-origin': type\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Calculate z-index value.\r\n     *\r\n     * @returns {number} z-index value\r\n     */\r\n    DragDropOntoImageQuestion.prototype.calculateZIndex = function() {\r\n        var zIndex = 0;\r\n        this.getRoot().find('.ddarea .dropzone, div.droparea .draghome').each(function(i, dropNode) {\r\n            dropNode = $(dropNode);\r\n            // Note that webkit browsers won't return the z-index value from the CSS stylesheet\r\n            // if the element doesn't have a position specified. Instead it'll return \"auto\".\r\n            var itemZIndex = dropNode.css('z-index') ? parseInt(dropNode.css('z-index')) : 0;\r\n\r\n            if (itemZIndex > zIndex) {\r\n                zIndex = itemZIndex;\r\n            }\r\n        });\r\n\r\n        return zIndex;\r\n    };\r\n\r\n    /**\r\n     * Check that the drag is drop to it's clone.\r\n     *\r\n     * @param {jQuery} drag The drag.\r\n     * @param {jQuery} drop The drop.\r\n     * @returns {boolean}\r\n     */\r\n    DragDropOntoImageQuestion.prototype.isDragSameAsDrop = function(drag, drop) {\r\n        return this.getChoice(drag) === this.getChoice(drop) && this.getGroup(drag) === this.getGroup(drop);\r\n    };\r\n\r\n    /**\r\n     * Singleton object that handles all the DragDropOntoImageQuestions\r\n     * on the page, and deals with event dispatching.\r\n     * @type {Object}\r\n     */\r\n    var questionManager = {\r\n\r\n        /**\r\n         * {boolean} ensures that the event handlers are only initialised once per page.\r\n         */\r\n        eventHandlersInitialised: false,\r\n\r\n        /**\r\n         * {Object} ensures that the drag event handlers are only initialised once per question,\r\n         * indexed by containerId (id on the .que div).\r\n         */\r\n        dragEventHandlersInitialised: {},\r\n\r\n        /**\r\n         * {boolean} is printing or not.\r\n         */\r\n        isPrinting: false,\r\n\r\n        /**\r\n         * {boolean} is keyboard navigation or not.\r\n         */\r\n        isKeyboardNavigation: false,\r\n\r\n        /**\r\n         * {Object} all the questions on this page, indexed by containerId (id on the .que div).\r\n         */\r\n        questions: {}, // An object containing all the information about each question on the page.\r\n\r\n        /**\r\n         * Initialise one question.\r\n         *\r\n         * @method\r\n         * @param {String} containerId the id of the div.que that contains this question.\r\n         * @param {boolean} readOnly whether the question is read-only.\r\n         * @param {Array} places data.\r\n         */\r\n        init: function(containerId, readOnly, places) {\r\n            questionManager.questions[containerId] =\r\n                new DragDropOntoImageQuestion(containerId, readOnly, places);\r\n            if (!questionManager.eventHandlersInitialised) {\r\n                questionManager.setupEventHandlers();\r\n                questionManager.eventHandlersInitialised = true;\r\n            }\r\n            if (!questionManager.dragEventHandlersInitialised.hasOwnProperty(containerId)) {\r\n                questionManager.dragEventHandlersInitialised[containerId] = true;\r\n                // We do not use the body event here to prevent the other event on Mobile device, such as scroll event.\r\n                var questionContainer = document.getElementById(containerId);\r\n                if (questionContainer.classList.contains('ddimageortext') &&\r\n                    !questionContainer.classList.contains('qtype_ddimageortext-readonly')) {\r\n                    // TODO: Convert all the jQuery selectors and events to native Javascript.\r\n                    questionManager.addEventHandlersToDrag($(questionContainer).find('.draghome'));\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Set up the event handlers that make this question type work. (Done once per page.)\r\n         */\r\n        setupEventHandlers: function() {\r\n            $('body')\r\n                .on('keydown',\r\n                    '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .dropzones .dropzone',\r\n                    questionManager.handleKeyPress)\r\n                .on('keydown',\r\n                    '.que.ddimageortext:not(.qtype_ddimageortext-readonly) .draghome.placed:not(.beingdragged)',\r\n                    questionManager.handleKeyPress)\r\n                .on('qtype_ddimageortext-dragmoved', questionManager.handleDragMoved);\r\n            $(window).on('resize', function() {\r\n                questionManager.handleWindowResize(false);\r\n            });\r\n            window.addEventListener('beforeprint', function() {\r\n                questionManager.isPrinting = true;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            window.addEventListener('afterprint', function() {\r\n                questionManager.isPrinting = false;\r\n                questionManager.handleWindowResize(questionManager.isPrinting);\r\n            });\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved();\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Binding the drag/touch event again for newly created element.\r\n         *\r\n         * @param {jQuery} element Element to bind the event\r\n         */\r\n        addEventHandlersToDrag: function(element) {\r\n            // Unbind all the mousedown and touchstart events to prevent double binding.\r\n            element.unbind('mousedown touchstart');\r\n            element.on('mousedown touchstart', questionManager.handleDragStart);\r\n        },\r\n\r\n        /**\r\n         * Handle mouse down / touch start events on drags.\r\n         * @param {Event} e the DOM event.\r\n         */\r\n        handleDragStart: function(e) {\r\n            e.preventDefault();\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleDragStart(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle key down / press events on drags.\r\n         * @param {KeyboardEvent} e\r\n         */\r\n        handleKeyPress: function(e) {\r\n            if (questionManager.isKeyboardNavigation) {\r\n                return;\r\n            }\r\n            questionManager.isKeyboardNavigation = true;\r\n            var question = questionManager.getQuestionForEvent(e);\r\n            if (question) {\r\n                question.handleKeyPress(e);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Handle when the window is resized.\r\n         * @param {boolean} isPrinting\r\n         */\r\n        handleWindowResize: function(isPrinting) {\r\n            for (var containerId in questionManager.questions) {\r\n                if (questionManager.questions.hasOwnProperty(containerId)) {\r\n                    questionManager.questions[containerId].isPrinting = isPrinting;\r\n                    questionManager.questions[containerId].handleResize();\r\n                }\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Sometimes, despite our best efforts, things change in a way that cannot\r\n         * be specifically caught (e.g. dock expanding or collapsing in Boost).\r\n         * Therefore, we need to periodically check everything is in the right position.\r\n         */\r\n        fixLayoutIfThingsMoved: function() {\r\n            this.handleWindowResize(questionManager.isPrinting);\r\n            // We use setTimeout after finishing work, rather than setInterval,\r\n            // in case positioning things is slow. We want 100 ms gap\r\n            // between executions, not what setInterval does.\r\n            setTimeout(function() {\r\n                questionManager.fixLayoutIfThingsMoved(questionManager.isPrinting);\r\n            }, 100);\r\n        },\r\n\r\n        /**\r\n         * Handle when drag moved.\r\n         *\r\n         * @param {Event} e the event.\r\n         * @param {jQuery} drag the drag\r\n         * @param {jQuery} target the target\r\n         * @param {DragDropOntoImageQuestion} thisQ the question.\r\n         */\r\n        handleDragMoved: function(e, drag, target, thisQ) {\r\n            drag.removeClass('beingdragged').css('z-index', '');\r\n            drag.css('top', target.position().top).css('left', target.position().left);\r\n            target.after(drag);\r\n            target.removeClass('active');\r\n            if (typeof drag.data('unplaced') !== 'undefined' && drag.data('unplaced') === true) {\r\n                drag.removeClass('placed').addClass('unplaced');\r\n                drag.removeAttr('tabindex');\r\n                drag.removeData('unplaced');\r\n                drag.css('top', '')\r\n                    .css('left', '')\r\n                    .css('transform', '');\r\n                if (drag.hasClass('infinite') && thisQ.getInfiniteDragClones(drag, true).length > 1) {\r\n                    thisQ.getInfiniteDragClones(drag, true).first().remove();\r\n                }\r\n            } else {\r\n                drag.data('originX', target.data('originX')).data('originY', target.data('originY'));\r\n                thisQ.handleElementScale(drag, 'left top');\r\n            }\r\n            if (typeof drag.data('isfocus') !== 'undefined' && drag.data('isfocus') === true) {\r\n                drag.focus();\r\n                drag.removeData('isfocus');\r\n            }\r\n            if (typeof target.data('isfocus') !== 'undefined' && target.data('isfocus') === true) {\r\n                target.removeData('isfocus');\r\n            }\r\n            if (questionManager.isKeyboardNavigation) {\r\n                questionManager.isKeyboardNavigation = false;\r\n            }\r\n            if (thisQ.isQuestionInteracted()) {\r\n                // The user has interacted with the draggable items. We need to mark the form as dirty.\r\n                questionManager.handleFormDirty();\r\n                // Save the new answered value.\r\n                thisQ.questionAnswer = thisQ.getQuestionAnsweredValues();\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Given an event, work out which question it effects.\r\n         * @param {Event} e the event.\r\n         * @returns {DragDropOntoImageQuestion|undefined} The question, or undefined.\r\n         */\r\n        getQuestionForEvent: function(e) {\r\n            var containerId = $(e.currentTarget).closest('.que.ddimageortext').attr('id');\r\n            return questionManager.questions[containerId];\r\n        },\r\n\r\n        /**\r\n         * Handle when the form is dirty.\r\n         */\r\n        handleFormDirty: function() {\r\n            const responseForm = document.getElementById('responseform');\r\n            FormChangeChecker.markFormAsDirty(responseForm);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @alias module:qtype_ddimageortext/question\r\n     */\r\n    return {\r\n        init: questionManager.init\r\n    };\r\n});\r\n"],"names":["define","$","dragDrop","keys","FormChangeChecker","filterEvent","DragDropOntoImageQuestion","containerId","readOnly","places","questionAnswer","questionDragDropWidthHeight","M","util","js_pending","this","allImagesLoaded","imageLoadingTimeoutId","isPrinting","getRoot","addClass","thisQ","getNotYetLoadedImages","one","waitForAllImagesToBeLoaded","document","addEventListener","eventTypes","filterContentRenderingComplete","elements","detail","nodes","forEach","element","changeAllDragsAndDropsToFilteredContent","prototype","filteredElement","currentFilteredItem","parentIsDD","parent","closest","hasClass","isDD","find","length","group","getGroup","choice","getChoice","listOfModifiedDragDrop","each","i","node","get","originalClass","attr","filteredDragDropClone","clone","before","push","remove","currentHeight","height","currentWidth","width","maxWidth","Math","ceil","offsetWidth","maxHeight","offsetHeight","resizeAllDragsAndDropsInGroup","clearTimeout","setTimeout","setupQuestion","not","imgNode","imageIsLoaded","imgElement","complete","naturalHeight","resizeAllDragsAndDrops","cloneDrags","positionDragsAndDrops","js_complete","getClassnameNumericSuffix","root","dragHomes","drag","max","css","hasOwnProperty","place","label","text","parseInt","get_string","append","index","dragHome","placeHolder","removeClass","cloneDragsForOneChoice","noOfDrags","noOfDropsInGroup","cloneDrag","offset","bgRatio","dropNode","drop","getPlace","xy","data","handleElementScale","dragNode","currentPlace","removeAttr","inputNode","input","val","unplacedDrag","getUnplacedChoice","hiddenDrag","getDragClone","getInfiniteDragClones","after","questionManager","addEventHandlersToDrag","sendDragToDrop","getQuestionAnsweredValues","result","id","value","isQuestionInteracted","oldAnswer","newAnswer","isInteracted","JSON","stringify","Object","key","handleDragStart","e","target","newIndex","calculateZIndex","prepare","start","setInputValue","hiddenDrop","getDrop","x","y","dragMove","dragEnd","pageX","pageY","highlighted","isPointInDrop","isDragSameAsDrop","placed","placedNode","placedDrag","sendDragHome","oldDrag","getCurrentDragInPlace","focus","animateTo","getDragHome","handleKeyPress","currentDrag","nextDrag","keyCode","space","arrowRight","arrowDown","getNextDrag","arrowLeft","arrowUp","getPreviousDrag","escape","isKeyboardNavigation","preventDefault","numChoices","noOfChoicesInGroup","next","previous","currentPos","targetPos","animate","left","top","duration","done","trigger","position","outerWidth","outerHeight","getElementById","bgImage","is","slice","prefix","classes","classesArr","split","RegExp","test","match","exec","Number","inHome","handleResize","parseFloat","bgImg","bgImgNaturalWidth","naturalWidth","type","zIndex","itemZIndex","eventHandlersInitialised","dragEventHandlersInitialised","questions","init","setupEventHandlers","questionContainer","classList","contains","on","handleDragMoved","window","handleWindowResize","fixLayoutIfThingsMoved","unbind","question","getQuestionForEvent","removeData","first","handleFormDirty","currentTarget","responseForm","markFormAsDirty"],"mappings":";;;;;;;AAsBAA,sCAAO,CACH,SACA,gBACA,iBACA,0BACA,wBACD,SACCC,EACAC,SACAC,KACAC,kBACAC,sBAaSC,0BAA0BC,YAAaC,SAAUC,aACjDF,YAAcA,iBACdG,eAAiB,QACjBC,4BAA8B,GACnCC,EAAEC,KAAKC,WAAW,4BAA8BC,KAAKR,kBAChDE,OAASA,YACTO,iBAAkB,OAClBC,sBAAwB,UACxBC,YAAa,EACdV,eACKW,UAAUC,SAAS,oCAGxBC,MAAQN,UACPO,wBAAwBC,IAAI,QAAQ,WACrCF,MAAMG,qCAELA,6BAELC,SAASC,iBAAiBrB,YAAYsB,WAAWC,gCAAiCC,WAC9EA,SAASC,OAAOC,MAAMC,SAASC,UAC3BZ,MAAMa,wCAAwCD,eAU1D3B,0BAA0B6B,UAAUD,wCAA0C,SAASE,qBAC/EC,oBAAsBpC,EAAEmC,uBACtBE,WAAaD,oBAAoBE,SAASC,QAAQ,OAAOC,SAAS,WACpEJ,oBAAoBE,SAASE,SAAS,YACpCC,KAAOL,oBAAoBI,SAAS,WAAaJ,oBAAoBI,SAAS,gBAE/EH,aAAeI,eAGhBJ,aACAD,oBAAsBA,oBAAoBE,SAASC,QAAQ,QAE3DzB,KAAKI,UAAUwB,KAAKN,qBAAqBO,QAAU,eAKjDC,MAAQ9B,KAAK+B,SAAST,qBACxBU,OAAShC,KAAKiC,UAAUX,yBACxBY,uBAAyB,QAGxB9B,UAAUwB,KAAK,SAAWE,MAAQ,UAAYE,QAAQG,MAAK,SAASC,EAAGC,SAEpEnD,EAAEmD,MAAMC,IAAI,KAAOhB,oBAAoBgB,IAAI,gBAGzCC,cAAgBrD,EAAEmD,MAAMG,KAAK,SAE7BC,sBAAwBnB,oBAAoBoB,QAElDD,sBAAsBD,KAAK,QAASD,eAEpCrD,EAAEmD,MAAMM,OAAOF,uBAEfP,uBAAuBU,KAAKP,SAGhCH,uBAAuBjB,SAAQ,SAASoB,MACpCnD,EAAEmD,MAAMQ,kBAGNC,cAAgBxB,oBAAoByB,SACpCC,aAAe1B,oBAAoB2B,QAEzC3B,oBAAoByB,OAAO,QAC3BzB,oBAAoB2B,MAAM,QACtBjD,KAAKJ,4BAA4BkC,OAAOoB,SAAWC,KAAKC,KAAK/B,gBAAgBgC,cAC7ErD,KAAKJ,4BAA4BkC,OAAOwB,UAAYH,KAAKC,KAAK,EAAI/B,gBAAgBkC,mBAE7EC,8BAA8B1B,QAEnCR,oBAAoByB,OAAOD,eAC3BxB,oBAAoB2B,MAAMD,gBAUlCzD,0BAA0B6B,UAAUX,2BAA6B,eACzDH,MAAQN,KAIRA,KAAKC,kBAK0B,OAA/BD,KAAKE,uBACLuD,aAAazD,KAAKE,uBAMlBF,KAAKO,wBAAwBsB,OAAS,OACjC3B,sBAAwBwD,YAAW,WACpCpD,MAAMG,+BACP,WAKFR,iBAAkB,EACvBK,MAAMqD,mBAQVpE,0BAA0B6B,UAAUb,sBAAwB,eACpDD,MAAQN,YACLA,KAAKI,UAAUwB,KAAK,eAAegC,KAAI,SAASxB,EAAGyB,gBAC/CvD,MAAMwD,cAAcD,aAUnCtE,0BAA0B6B,UAAU0C,cAAgB,SAASC,mBAClDA,WAAWC,UAAyC,IAA7BD,WAAWE,eAM7C1E,0BAA0B6B,UAAUuC,cAAgB,gBAC3CO,8BACAC,kBACAC,wBACLvE,EAAEC,KAAKuE,YAAY,4BAA8BrE,KAAKR,cAM1DD,0BAA0B6B,UAAU8C,uBAAyB,eACrD5D,MAAQN,UACPI,UAAUwB,KAAK,oBAAoBO,MAAK,SAASC,EAAGC,MACrD/B,MAAMkD,8BACFlD,MAAMgE,0BAA0BpF,EAAEmD,MAAO,sBASrD9C,0BAA0B6B,UAAUoC,8BAAgC,SAAS1B,WACrEyC,KAAOvE,KAAKI,UACZoE,UAAYD,KAAK3C,KAAK,YAAcE,OACpCoB,SAAW,EACXI,UAAY,MAmBX,IAAIlB,KAhBToC,UAAUrC,MAAK,SAASC,EAAGqC,MACvBvB,SAAWC,KAAKuB,IAAIxB,SAAUC,KAAKC,KAAKqB,KAAKpB,cAC7CC,UAAYH,KAAKuB,IAAIpB,UAAWH,KAAKC,KAAKqB,KAAKlB,kBAInDL,UAAY,GACZI,WAAa,QACR1D,4BAA4BkC,OAAS,CAACoB,SAAAA,SAAUI,UAAAA,WAGrDkB,UAAUrC,MAAK,SAASC,EAAGqC,MACvBvF,EAAEuF,MAAMxB,MAAMC,UAAUH,OAAOO,WAAWqB,IAAI,aAAcrB,UAAY,SAI9DtD,KAAKN,UACVM,KAAKN,OAAOkF,eAAgBxC,QAG7ByC,MAAQ7E,KAAKN,OAAO0C,GACpB0C,MAAQD,MAAME,KACdC,SAASH,MAAM/C,SAAWA,QAGhB,KAAVgD,QACAA,MAAQjF,EAAEC,KAAKmF,WAAW,QAAS,wBAE6C,IAAhFV,KAAK3C,KAAK,6BAA+BiD,MAAM/C,MAAQ,SAAWM,GAAGP,QACrE0C,KAAK3C,KAAK,cAAcsD,OAAO,oCAAsCL,MAAM/C,MACvE,SAAWM,EADgB,2CAEG0C,MAAQ,uBAE9CP,KAAK3C,KAAK,kBAAoBQ,GAAGa,MAAMC,SAAW,GAAGH,OAAOO,UAAY,MAShF/D,0BAA0B6B,UAAU+C,WAAa,eACzC7D,MAAQN,KACZM,MAAMF,UAAUwB,KAAK,aAAaO,MAAK,SAASgD,MAAOC,cAC/CX,KAAOvF,EAAEkG,UACTC,YAAcZ,KAAK/B,QACvB2C,YAAYC,cACZD,YAAYhF,SAAS,kBACjBC,MAAM2B,UAAUwC,MAAQ,SACxBnE,MAAMyB,SAAS0C,MAAQ,oBAC3BA,KAAK9B,OAAO0C,iBASpB9F,0BAA0B6B,UAAUmE,uBAAyB,SAASH,aAC9DA,SAAS1D,SAAS,oBACd8D,UAAYxF,KAAKyF,iBAAiBzF,KAAK+B,SAASqD,WAC3ChD,EAAI,EAAGA,EAAIoD,UAAWpD,SACtBsD,UAAUN,oBAGdM,UAAUN,WASvB7F,0BAA0B6B,UAAUsE,UAAY,SAASN,cACjDX,KAAOW,SAAS1C,QACpB+B,KAAKa,YAAY,YACZjF,SAAS,mCACTsF,OAAOP,SAASO,eAChBvF,UAAUwB,KAAK,cAAcsD,OAAOT,OAM7ClF,0BAA0B6B,UAAUgD,sBAAwB,eACpD9D,MAAQN,KACRuE,KAAOvE,KAAKI,UACZwF,QAAU5F,KAAK4F,UAGnBrB,KAAK3C,KAAK,qBAAqBO,MAAK,SAASC,EAAGyD,cACxCC,KAAO5G,EAAE2G,UACThB,MAAQvE,MAAMZ,OAAOY,MAAMyF,SAASD,OAExCA,KAAKnB,IAAI,OAAQK,SAASH,MAAMmB,GAAG,IAAMJ,SACpCjB,IAAI,MAAOK,SAASH,MAAMmB,GAAG,IAAMJ,SACxCE,KAAKG,KAAK,UAAWjB,SAASH,MAAMmB,GAAG,KAClCC,KAAK,UAAWjB,SAASH,MAAMmB,GAAG,KACvC1F,MAAM4F,mBAAmBJ,KAAM,eAInCvB,KAAK3C,KAAK,aAAagC,IAAI,oBAAoBzB,MAAK,SAASC,EAAG+D,cACxD1B,KAAOvF,EAAEiH,UACTC,aAAe9F,MAAMgE,0BAA0BG,KAAM,WACzDA,KAAKpE,SAAS,YACTiF,YAAY,UACjBb,KAAK4B,WAAW,YACK,OAAjBD,cACA3B,KAAKa,YAAY,UAAYc,iBAKrC7B,KAAK3C,KAAK,oBAAoBO,MAAK,SAASC,EAAGkE,eACvCC,MAAQrH,EAAEoH,WACVtE,OAASuE,MAAMC,WACG,IAAlBxE,OAAOH,QAAiBG,OAAOH,OAAS,GAAgB,MAAXG,aAK7C6C,MAAQvE,MAAMyF,SAASQ,OAEvBE,aAAenG,MAAMoG,kBAAkBpG,MAAMyB,SAASwE,OAAQvE,QAE9D2E,WAAarG,MAAMsG,aAAaH,iBAChCE,WAAW9E,UACP4E,aAAa/E,SAAS,YAAa,KAC/B8D,UAAYlF,MAAMmF,iBAAiBnF,MAAMyB,SAAS0E,kBACrCnG,MAAMuG,sBAAsBJ,cAAc,GAC5C5E,OAAS2D,UAAW,KAC3BE,UAAYe,aAAa/D,QAC7BgD,UAAUJ,YAAY,gBACtBI,UAAUW,WAAW,YACrBM,WAAWG,MAAMpB,WAKjBqB,gBAAgBC,uBAAuBtB,gBAEvCiB,WAAWtG,SAAS,eAGxBsG,WAAWtG,SAAS,cAKxByF,KAAOvB,KAAK3C,KAAK,kBAAoBiD,OACzCvE,MAAM2G,eAAeR,aAAcX,UAIvCxF,MAAMX,eAAiBW,MAAM4G,6BAQjC3H,0BAA0B6B,UAAU8F,0BAA4B,eACxDC,OAAS,eACR/G,UAAUwB,KAAK,oBAAoBO,MAAK,CAACC,EAAGkE,aAC7Ca,OAAOb,UAAUc,IAAMd,UAAUe,SAG9BF,QAQX5H,0BAA0B6B,UAAUkG,qBAAuB,iBACjDC,UAAYvH,KAAKL,eACjB6H,UAAYxH,KAAKkH,gCACnBO,cAAe,SAGfC,KAAKC,UAAUH,aAAeE,KAAKC,UAAUJ,YAC7CE,cAAe,EACRA,eAGXG,OAAOxI,KAAKoI,WAAWvG,SAAQ4G,MACvBL,UAAUK,OAASN,UAAUM,OAC7BJ,cAAe,MAIhBA,eAQXlI,0BAA0B6B,UAAU0G,gBAAkB,SAASC,OACvDzH,MAAQN,KACRyE,KAAOvF,EAAE6I,EAAEC,QAAQvG,QAAQ,aAE3BwG,SADejI,KAAKkI,kBACM,KAEnB/I,SAASgJ,QAAQJ,GAClBK,QAAS3D,KAAK/C,SAAS,iBAIjC+C,KAAKpE,SAAS,gBAAgBsE,IAAI,YAAa,IAAIA,IAAI,UAAWsD,cAC9D7B,aAAepG,KAAKsE,0BAA0BG,KAAM,cACnC,OAAjB2B,aAAuB,MAClBiC,cAAcjC,aAAc,GACjC3B,KAAKa,YAAY,UAAYc,kBACzBkC,WAAahI,MAAMiI,QAAQ9D,KAAM2B,cACjCkC,WAAWzG,SACXyG,WAAWjI,SAAS,UACpBoE,KAAKkB,OAAO2C,WAAW3C,eAExB,KACCgB,WAAarG,MAAMsG,aAAanC,SAChCkC,WAAW9E,UACP4C,KAAK/C,SAAS,YAAa,KACvB8D,UAAYxF,KAAKyF,iBAAiBnF,MAAMyB,SAAS0C,UACpCzE,KAAK6G,sBAAsBpC,MAAM,GACnC5C,OAAS2D,UAAW,KAC3BE,UAAYjB,KAAK/B,QACrBgD,UAAUJ,YAAY,gBACtBI,UAAUW,WAAW,YACrBM,WAAWG,MAAMpB,WACjBqB,gBAAgBC,uBAAuBtB,WACvCjB,KAAKkB,OAAOD,UAAUC,eAEtBgB,WAAWtG,SAAS,UACpBoE,KAAKkB,OAAOgB,WAAWhB,eAG3BgB,WAAWtG,SAAS,UACpBoE,KAAKkB,OAAOgB,WAAWhB,UAKnCxG,SAASiJ,MAAML,EAAGtD,MAAM,SAAS+D,EAAGC,EAAGhE,MACnCnE,MAAMoI,SAASF,EAAGC,EAAGhE,SACtB,SAAS+D,EAAGC,EAAGhE,MACdnE,MAAMqI,QAAQH,EAAGC,EAAGhE,WAW5BlF,0BAA0B6B,UAAUsH,SAAW,SAASE,MAAOC,MAAOpE,UAC9DnE,MAAQN,KACR8I,aAAc,OACb1I,UAAUwB,KAAK,kBAAoB5B,KAAK+B,SAAS0C,OAAOtC,MAAK,SAASC,EAAGyD,cACtEC,KAAO5G,EAAE2G,UACTvF,MAAMyI,cAAcH,MAAOC,MAAO/C,QAAUgD,aAC5CA,aAAc,EACdhD,KAAKzF,SAAS,yBAEdyF,KAAKR,YAAY,gCAGpBlF,UAAUwB,KAAK,yBAA2B5B,KAAK+B,SAAS0C,OAAOb,IAAI,iBAAiBzB,MAAK,SAASC,EAAGyD,cAClGC,KAAO5G,EAAE2G,WACTvF,MAAMyI,cAAcH,MAAOC,MAAO/C,OAAUgD,aAAgBxI,MAAM0I,iBAAiBvE,KAAMqB,MAIzFA,KAAKR,YAAY,yBAHjBwD,aAAc,EACdhD,KAAKzF,SAAS,6BAc1Bd,0BAA0B6B,UAAUuH,QAAU,SAASC,MAAOC,MAAOpE,UAC7DnE,MAAQN,KACRuE,KAAOvE,KAAKI,UACZ6I,QAAS,EAGb1E,KAAK3C,KAAK,kBAAoB5B,KAAK+B,SAAS0C,OAAOtC,MAAK,SAASC,EAAGyD,cAC5DC,KAAO5G,EAAE2G,iBACRvF,MAAMyI,cAAcH,MAAOC,MAAO/C,QAMvCA,KAAKR,YAAY,wBACjBhF,MAAM2G,eAAexC,KAAMqB,MAC3BmD,QAAS,GACF,MAGNA,QAED1E,KAAK3C,KAAK,yBAA2B5B,KAAK+B,SAAS0C,OAAOb,IAAI,iBAAiBzB,MAAK,SAASC,EAAG8G,gBACxFC,WAAajK,EAAEgK,gBACd5I,MAAMyI,cAAcH,MAAOC,MAAOM,aAAe7I,MAAM0I,iBAAiBvE,KAAM0E,mBAExE,EAIXA,WAAW7D,YAAY,4BACnBc,aAAe9F,MAAMgE,0BAA0B6E,WAAY,WAC3DrD,KAAOxF,MAAMiI,QAAQ9D,KAAM2B,qBAC/B9F,MAAM2G,eAAexC,KAAMqB,MAC3BmD,QAAS,GACF,KAIVA,aACIG,aAAa3E,OAU1BlF,0BAA0B6B,UAAU6F,eAAiB,SAASxC,KAAMqB,UAE5DuD,QAAUrJ,KAAKsJ,sBAAsBtJ,KAAK+F,SAASD,UAChC,IAAnBuD,QAAQxH,OAAc,CACtBwH,QAAQhJ,SAAS,gBACjBgJ,QAAQ1D,OAAO0D,QAAQ1D,cACnBS,aAAepG,KAAKsE,0BAA0B+E,QAAS,WAC1CrJ,KAAKuI,QAAQc,QAASjD,cAC5B/F,SAAS,eACf+I,aAAaC,SAGF,IAAhB5E,KAAK5C,aACAwG,cAAcrI,KAAK+F,SAASD,MAAO,GACpCA,KAAKG,KAAK,YACVH,KAAKyD,eAGJlB,cAAcrI,KAAK+F,SAASD,MAAO9F,KAAKiC,UAAUwC,OACvDA,KAAKa,YAAY,YACZjF,SAAS,iBAAmBL,KAAK+F,SAASD,OAC/CrB,KAAKjC,KAAK,WAAY,QACjBgH,UAAU/E,KAAMqB,QAS7BvG,0BAA0B6B,UAAUgI,aAAe,SAAS3E,UACpD2B,aAAepG,KAAKsE,0BAA0BG,KAAM,WACnC,OAAjB2B,cACA3B,KAAKa,YAAY,UAAYc,cAEjC3B,KAAKwB,KAAK,YAAY,QAEjBuD,UAAU/E,KAAMzE,KAAKyJ,YAAYzJ,KAAK+B,SAAS0C,MAAOzE,KAAKiC,UAAUwC,SAW9ElF,0BAA0B6B,UAAUsI,eAAiB,SAAS3B,OACtDjC,KAAO5G,EAAE6I,EAAEC,QAAQvG,QAAQ,gBACX,IAAhBqE,KAAKjE,OAAc,KACfsH,WAAajK,EAAE6I,EAAEC,QACjB5B,aAAepG,KAAKsE,0BAA0B6E,WAAY,WACzC,OAAjB/C,eACAN,KAAO9F,KAAKuI,QAAQY,WAAY/C,mBAGpCuD,YAAc3J,KAAKsJ,sBAAsBtJ,KAAK+F,SAASD,OACvD8D,SAAW1K,WAEP6I,EAAE8B,cACDzK,KAAK0K,WACL1K,KAAK2K,gBACL3K,KAAK4K,UACNJ,SAAW5J,KAAKiK,YAAYjK,KAAK+B,SAAS+D,MAAO6D,wBAGhDvK,KAAK8K,eACL9K,KAAK+K,QACNP,SAAW5J,KAAKoK,gBAAgBpK,KAAK+B,SAAS+D,MAAO6D,wBAGpDvK,KAAKiL,OACNtD,gBAAgBuD,sBAAuB,4BAIvCvD,gBAAgBuD,sBAAuB,MAI3CV,SAAS/H,OAAQ,CACjB+H,SAAS3D,KAAK,WAAW,GACzB2D,SAASvJ,SAAS,oBACdsG,WAAa3G,KAAK4G,aAAagD,aAC/BjD,WAAW9E,UACP+H,SAASlI,SAAS,YAAa,KAC3B8D,UAAYxF,KAAKyF,iBAAiBzF,KAAK+B,SAAS6H,cACnC5J,KAAK6G,sBAAsB+C,UAAU,GACvC/H,OAAS2D,UAAW,KAC3BE,UAAYkE,SAASlH,QACzBgD,UAAUJ,YAAY,gBACtBI,UAAUW,WAAW,YACrBM,WAAWG,MAAMpB,WACjBqB,gBAAgBC,uBAAuBtB,WACvCkE,SAASjE,OAAOD,UAAUC,eAE1BgB,WAAWtG,SAAS,UACpBuJ,SAASjE,OAAOgB,WAAWhB,eAG/BgB,WAAWtG,SAAS,UACpBuJ,SAASjE,OAAOgB,WAAWhB,eAInCG,KAAKG,KAAK,WAAW,GAGzB8B,EAAEwC,sBACGtD,eAAe2C,SAAU9D,OAUlCvG,0BAA0B6B,UAAU6I,YAAc,SAASnI,MAAO2C,UAC1DzC,OACAwI,WAAaxK,KAAKyK,mBAAmB3I,OAGrCE,OADgB,IAAhByC,KAAK5C,OACI,EAEA7B,KAAKiC,UAAUwC,MAAQ,UAGhCiG,KAAO1K,KAAK0G,kBAAkB5E,MAAOE,QAClB,IAAhB0I,KAAK7I,QAAgBG,OAASwI,YACjCxI,SACA0I,KAAO1K,KAAK0G,kBAAkB5E,MAAOE,eAGlC0I,MAUXnL,0BAA0B6B,UAAUgJ,gBAAkB,SAAStI,MAAO2C,UAC9DzC,OAGAA,OADgB,IAAhByC,KAAK5C,OACI7B,KAAKyK,mBAAmB3I,OAExB9B,KAAKiC,UAAUwC,MAAQ,UAGhCkG,SAAW3K,KAAK0G,kBAAkB5E,MAAOE,QAClB,IAApB2I,SAAS9I,QAAgBG,OAAS,GACrCA,SACA2I,SAAW3K,KAAK0G,kBAAkB5E,MAAOE,eAItC2I,UASXpL,0BAA0B6B,UAAUoI,UAAY,SAAS/E,KAAMuD,YACvD4C,WAAanG,KAAKkB,SAClBkF,UAAY7C,OAAOrC,SACnBrF,MAAQN,KAEZH,EAAEC,KAAKC,WAAW,+BAAiCO,MAAMd,aAKzDiF,KAAKqG,QACD,CACIC,KAAM/F,SAASP,KAAKE,IAAI,SAAWkG,UAAUE,KAAOH,WAAWG,KAC/DC,IAAKhG,SAASP,KAAKE,IAAI,QAAUkG,UAAUG,IAAMJ,WAAWI,KAEhE,CACIC,SAAU,OACVC,KAAM,WACFhM,EAAE,QAAQiM,QAAQ,gCAAiC,CAAC1G,KAAMuD,OAAQ1H,QAClET,EAAEC,KAAKuE,YAAY,+BAAiC/D,MAAMd,iBAc1ED,0BAA0B6B,UAAU2H,cAAgB,SAASH,MAAOC,MAAO/C,UACnEsF,SAAWtF,KAAKH,gBAChBG,KAAKpE,SAAS,YACPkH,OAASwC,SAASL,MAAQnC,MAAQwC,SAASL,KAAOjF,KAAKuF,cACvDxC,OAASuC,SAASJ,KAAOnC,MAAQuC,SAASJ,IAAMlF,KAAKwF,cAEzD1C,OAASwC,SAASL,MAAQnC,MAAQwC,SAASL,KAAOjF,KAAK7C,SACvD4F,OAASuC,SAASJ,KAAOnC,MAAQuC,SAASJ,IAAMlF,KAAK/C,UAShExD,0BAA0B6B,UAAUiH,cAAgB,SAASxD,MAAO7C,aAC3D5B,UAAUwB,KAAK,yBAA2BiD,OAAO2B,IAAIxE,SAQ9DzC,0BAA0B6B,UAAUhB,QAAU,kBACnClB,EAAEwB,SAAS6K,eAAevL,KAAKR,eAO1CD,0BAA0B6B,UAAUoK,QAAU,kBACnCxL,KAAKI,UAAUwB,KAAK,uBAU/BrC,0BAA0B6B,UAAUqI,YAAc,SAAS3H,MAAOE,eACzDhC,KAAKI,UAAUwB,KAAK,kCAAoCE,MAAQ,UAAYE,QAAQyJ,GAAG,YAMrFzL,KAAKI,UAAUwB,KAAK,kCAAoCE,MAAQ,UAAYE,QALxEhC,KAAKI,UAAUwB,KAAK,iBAAmBE,MAAnB,6BAEXE,OACZ,SAAWF,QAYvBvC,0BAA0B6B,UAAUsF,kBAAoB,SAAS5E,MAAOE,eAC7DhC,KAAKI,UAAUwB,KAAK,0BAA4BE,MAAQ,UAAYE,OAAS,aAAa0J,MAAM,EAAG,IAS9GnM,0BAA0B6B,UAAUkI,sBAAwB,SAASzE,cAC1D7E,KAAKI,UAAUwB,KAAK,4BAA8BiD,QAS7DtF,0BAA0B6B,UAAUqE,iBAAmB,SAAS3D,cACrD9B,KAAKI,UAAUwB,KAAK,kBAAoBE,OAAOD,QAS1DtC,0BAA0B6B,UAAUqJ,mBAAqB,SAAS3I,cACvD9B,KAAKI,UAAUwB,KAAK,iBAAmBE,MAAQ,cAAcD,QAUxEtC,0BAA0B6B,UAAUkD,0BAA4B,SAASjC,KAAMsJ,YACvEC,QAAUvJ,KAAKG,KAAK,YACR,KAAZoJ,gBACIC,WAAaD,QAAQE,MAAM,KACtB3G,MAAQ,EAAGA,MAAQ0G,WAAWhK,OAAQsD,QAAS,IACxC,IAAI4G,OAAO,IAAMJ,OAAS,aAC5BK,KAAKH,WAAW1G,QAAS,KAE3B8G,MADQ,IAAIF,OAAO,aACLG,KAAKL,WAAW1G,eAC3BgH,OAAOF,MAAM,YAIzB,MASX1M,0BAA0B6B,UAAUa,UAAY,SAASwC,aAC9CzE,KAAKsE,0BAA0BG,KAAM,WAUhDlF,0BAA0B6B,UAAUW,SAAW,SAASM,aAC7CrC,KAAKsE,0BAA0BjC,KAAM,UAShD9C,0BAA0B6B,UAAU2E,SAAW,SAAS1D,aAC7CrC,KAAKsE,0BAA0BjC,KAAM,UAShD9C,0BAA0B6B,UAAUwF,aAAe,SAASnC,aACjDzE,KAAKI,UAAUwB,KAAK,iBACvB5B,KAAK+B,SAAS0C,MADS,oBAGXzE,KAAKiC,UAAUwC,MAC3B,SAAWzE,KAAK+B,SAAS0C,MACzB,qBAURlF,0BAA0B6B,UAAUyF,sBAAwB,SAASpC,KAAM2H,eACnEA,OACOpM,KAAKI,UAAUwB,KAAK,iBACvB5B,KAAK+B,SAAS0C,MADS,oBAGXzE,KAAKiC,UAAUwC,MAC3B,SAAWzE,KAAK+B,SAAS0C,MACzB,aAAab,IAAI,oBAElB5D,KAAKI,UAAUwB,KAAK,mBACX5B,KAAKiC,UAAUwC,MAC3B,SAAWzE,KAAK+B,SAAS0C,MACzB,aAAab,IAAI,qBAUzBrE,0BAA0B6B,UAAUmH,QAAU,SAAS9D,KAAM2B,qBAClDpG,KAAKI,UAAUwB,KAAK,kBAAoB5B,KAAK+B,SAAS0C,MAAQ,SAAW2B,eAMpF7G,0BAA0B6B,UAAUiL,aAAe,eAC3C/L,MAAQN,KACR4F,QAAU5F,KAAK4F,UACf5F,KAAKG,aACLyF,QAAU,QAGTxF,UAAUwB,KAAK,qBAAqBO,MAAK,SAASC,EAAGyD,UACtD3G,EAAE2G,UACGlB,IAAI,OAAQK,SAAS9F,EAAE2G,UAAUI,KAAK,YAAcqG,WAAW1G,UAC/DjB,IAAI,MAAOK,SAAS9F,EAAE2G,UAAUI,KAAK,YAAcqG,WAAW1G,UACnEtF,MAAM4F,mBAAmBL,SAAU,oBAGlCzF,UAAUwB,KAAK,0BAA0BgC,IAAI,iBAAiBzB,MAAK,SAAS0F,IAAKpD,MAClFvF,EAAEuF,MACGE,IAAI,OAAQ2H,WAAWpN,EAAEuF,MAAMwB,KAAK,YAAcqG,WAAW1G,UAC7DjB,IAAI,MAAO2H,WAAWpN,EAAEuF,MAAMwB,KAAK,YAAcqG,WAAW1G,UACjEtF,MAAM4F,mBAAmBzB,KAAM,gBASvClF,0BAA0B6B,UAAUwE,QAAU,eACtC2G,MAAQvM,KAAKwL,UACbgB,kBAAoBD,MAAMjK,IAAI,GAAGmK,oBACdF,MAAMtJ,QAEHuJ,mBAS9BjN,0BAA0B6B,UAAU8E,mBAAqB,SAAShF,QAASwL,UACnE9G,QAAU0G,WAAWtM,KAAK4F,WAC1B5F,KAAKG,aACLyF,QAAU,GAEd1G,EAAEgC,SAASyD,IAAI,qBACU,SAAWiB,QAAU,qBACxB,SAAWA,QAAU,oBACtB,SAAWA,QAAU,mBACtB,SAAWA,QAAU,cACxB,SAAWA,QAAU,uBACd8G,QAS5BnN,0BAA0B6B,UAAU8G,gBAAkB,eAC9CyE,OAAS,cACRvM,UAAUwB,KAAK,6CAA6CO,MAAK,SAASC,EAAGyD,cAI1E+G,YAHJ/G,SAAW3G,EAAE2G,WAGalB,IAAI,WAAaK,SAASa,SAASlB,IAAI,YAAc,EAE3EiI,WAAaD,SACbA,OAASC,eAIVD,QAUXpN,0BAA0B6B,UAAU4H,iBAAmB,SAASvE,KAAMqB,aAC3D9F,KAAKiC,UAAUwC,QAAUzE,KAAKiC,UAAU6D,OAAS9F,KAAK+B,SAAS0C,QAAUzE,KAAK+B,SAAS+D,WAQ9FiB,gBAAkB,CAKlB8F,0BAA0B,EAM1BC,6BAA8B,GAK9B3M,YAAY,EAKZmK,sBAAsB,EAKtByC,UAAW,GAUXC,KAAM,SAASxN,YAAaC,SAAUC,WAClCqH,gBAAgBgG,UAAUvN,aACtB,IAAID,0BAA0BC,YAAaC,SAAUC,QACpDqH,gBAAgB8F,2BACjB9F,gBAAgBkG,qBAChBlG,gBAAgB8F,0BAA2B,IAE1C9F,gBAAgB+F,6BAA6BlI,eAAepF,aAAc,CAC3EuH,gBAAgB+F,6BAA6BtN,cAAe,MAExD0N,kBAAoBxM,SAAS6K,eAAe/L,aAC5C0N,kBAAkBC,UAAUC,SAAS,mBACpCF,kBAAkBC,UAAUC,SAAS,iCAEtCrG,gBAAgBC,uBAAuB9H,EAAEgO,mBAAmBtL,KAAK,gBAQ7EqL,mBAAoB,WAChB/N,EAAE,QACGmO,GAAG,UACA,6EACAtG,gBAAgB2C,gBACnB2D,GAAG,UACA,4FACAtG,gBAAgB2C,gBACnB2D,GAAG,gCAAiCtG,gBAAgBuG,iBACzDpO,EAAEqO,QAAQF,GAAG,UAAU,WACnBtG,gBAAgByG,oBAAmB,MAEvCD,OAAO5M,iBAAiB,eAAe,WACnCoG,gBAAgB5G,YAAa,EAC7B4G,gBAAgByG,mBAAmBzG,gBAAgB5G,eAEvDoN,OAAO5M,iBAAiB,cAAc,WAClCoG,gBAAgB5G,YAAa,EAC7B4G,gBAAgByG,mBAAmBzG,gBAAgB5G,eAEvDuD,YAAW,WACPqD,gBAAgB0G,2BACjB,MAQPzG,uBAAwB,SAAS9F,SAE7BA,QAAQwM,OAAO,wBACfxM,QAAQmM,GAAG,uBAAwBtG,gBAAgBe,kBAOvDA,gBAAiB,SAASC,GACtBA,EAAEwC,qBACEoD,SAAW5G,gBAAgB6G,oBAAoB7F,GAC/C4F,UACAA,SAAS7F,gBAAgBC,IAQjC2B,eAAgB,SAAS3B,OACjBhB,gBAAgBuD,sBAGpBvD,gBAAgBuD,sBAAuB,MACnCqD,SAAW5G,gBAAgB6G,oBAAoB7F,GAC/C4F,UACAA,SAASjE,eAAe3B,KAQhCyF,mBAAoB,SAASrN,gBACpB,IAAIX,eAAeuH,gBAAgBgG,UAChChG,gBAAgBgG,UAAUnI,eAAepF,eACzCuH,gBAAgBgG,UAAUvN,aAAaW,WAAaA,WACpD4G,gBAAgBgG,UAAUvN,aAAa6M,iBAUnDoB,uBAAwB,gBACfD,mBAAmBzG,gBAAgB5G,YAIxCuD,YAAW,WACPqD,gBAAgB0G,uBAAuB1G,gBAAgB5G,cACxD,MAWPmN,gBAAiB,SAASvF,EAAGtD,KAAMuD,OAAQ1H,OACvCmE,KAAKa,YAAY,gBAAgBX,IAAI,UAAW,IAChDF,KAAKE,IAAI,MAAOqD,OAAOoD,WAAWJ,KAAKrG,IAAI,OAAQqD,OAAOoD,WAAWL,MACrE/C,OAAOlB,MAAMrC,MACbuD,OAAO1C,YAAY,eACkB,IAA1Bb,KAAKwB,KAAK,cAAyD,IAA1BxB,KAAKwB,KAAK,aAC1DxB,KAAKa,YAAY,UAAUjF,SAAS,YACpCoE,KAAK4B,WAAW,YAChB5B,KAAKoJ,WAAW,YAChBpJ,KAAKE,IAAI,MAAO,IACXA,IAAI,OAAQ,IACZA,IAAI,YAAa,IAClBF,KAAK/C,SAAS,aAAepB,MAAMuG,sBAAsBpC,MAAM,GAAM5C,OAAS,GAC9EvB,MAAMuG,sBAAsBpC,MAAM,GAAMqJ,QAAQjL,WAGpD4B,KAAKwB,KAAK,UAAW+B,OAAO/B,KAAK,YAAYA,KAAK,UAAW+B,OAAO/B,KAAK,YACzE3F,MAAM4F,mBAAmBzB,KAAM,kBAEC,IAAzBA,KAAKwB,KAAK,aAAuD,IAAzBxB,KAAKwB,KAAK,aACzDxB,KAAK8E,QACL9E,KAAKoJ,WAAW,iBAEkB,IAA3B7F,OAAO/B,KAAK,aAAyD,IAA3B+B,OAAO/B,KAAK,YAC7D+B,OAAO6F,WAAW,WAElB9G,gBAAgBuD,uBAChBvD,gBAAgBuD,sBAAuB,GAEvChK,MAAMgH,yBAENP,gBAAgBgH,kBAEhBzN,MAAMX,eAAiBW,MAAM4G,8BASrC0G,oBAAqB,SAAS7F,OACtBvI,YAAcN,EAAE6I,EAAEiG,eAAevM,QAAQ,sBAAsBe,KAAK,aACjEuE,gBAAgBgG,UAAUvN,cAMrCuO,gBAAiB,iBACPE,aAAevN,SAAS6K,eAAe,gBAC7ClM,kBAAkB6O,gBAAgBD,sBAOnC,CACHjB,KAAMjG,gBAAgBiG"}
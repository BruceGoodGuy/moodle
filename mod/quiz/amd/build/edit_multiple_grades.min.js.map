{"version":3,"file":"edit_multiple_grades.min.js","sources":["../src/edit_multiple_grades.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing multiple grade items for a quiz.\n *\n * @module     mod_quiz/edit_multiple_grades\n * @copyright  2023 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport MoodleConfig from 'core/config';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport {render as renderTemplate, replaceNode, runTemplateJS, renderPix} from 'core/templates';\nimport Modal from 'core/modal';\nimport {prefetchStrings} from 'core/prefetch';\nimport Fragment from 'core/fragment';\n\n/**\n * @type {Object} selectors used in this code.\n */\nconst SELECTORS = {\n    'addGradeItemButton': '#mod_quiz-add_grade_item',\n    'autoSetupButton': '#mod_quiz-grades_auto_setup',\n    'editingPageContents': '#edit_grading_page-contents',\n    'gradeItemList': 'table#mod_quiz-grade-item-list',\n    'gradeItemSelect': 'select[data-slot-id]',\n    'gradeItemSelectId': (id) => 'select#grade-item-choice-' + id,\n    'gradeItemTr': 'table#mod_quiz-grade-item-list tr[data-quiz-grade-item-id]',\n    'inplaceEditable': 'span.inplaceeditable',\n    'inplaceEditableOn': 'span.inplaceeditable.inplaceeditingon',\n    'resetAllButton': '#mod_quiz-grades_reset_all',\n    'slotList': 'table#mod_quiz-slot-list',\n    'updateGradeItemLink': (id) => 'tr[data-quiz-grade-item-id=\"' + id + '\"] .quickeditlink',\n};\n\nprefetchStrings('mod_quiz', [\n    'overallfeedback_for',\n    'insertfeedbackbefore',\n]);\n\nlet modal;\n\n/**\n * Call the Ajax service to create a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst createGradeItem = (\n    quizId,\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{name: ''}],\n    }\n});\n\n/**\n * Call the Ajax service to update a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to update.\n * @param {String} newName the new name to set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateGradeItem = (\n    quizId,\n    gradeItemId,\n    newName\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId, name: newName}],\n    }\n});\n\n/**\n * Call the Ajax service to delete a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to delete.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst deleteGradeItem = (\n    quizId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_delete_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to update the quiz grade item used by a slot.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} slotId id of the slot to update.\n * @param {Number|null} gradeItemId new grade item ot set, or null to un-set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateSlotGradeItem = (\n    quizId,\n    slotId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_slots',\n    args: {\n        quizid: quizId,\n        slots: [{id: slotId, quizgradeitemid: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to setup one grade item for each quiz section.\n *\n * @param {Number} quizId id of the quiz to update.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst autoSetupGradeItems = (\n    quizId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_item_per_section',\n    args: {\n        quizid: quizId\n    }\n});\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object} methodCall a web service call to pass to fetchMany. Must include methodCall.args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServiceAndReturnRenderingData = (methodCall) => callServicesAndReturnRenderingData([methodCall]);\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object[]} methodCalls web service calls to pass to fetchMany. Must include methodCalls[0].args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServicesAndReturnRenderingData = (methodCalls) => {\n    methodCalls.push({\n            methodname: 'mod_quiz_get_edit_grading_page_data',\n            args: {\n                quizid: methodCalls[0].args.quizid,\n            }\n        });\n    return Promise.all(fetchMany(methodCalls))\n    .then(results => JSON.parse(results.at(-1)));\n};\n\n/**\n * A function to handle the event of adding overall feedback for each grade item.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemAddFeedback = async(e) => {\n    e.preventDefault();\n    const pending = new Pending('add-overall-feedback');\n    const tableCell = e.target.closest('td');\n    const tableRow = tableCell.closest('tr');\n    const contextId = Number(e.target.closest('a').dataset.contextid);\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n    const rawName = tableRow.querySelector('th span.inplaceeditable').dataset.rawName;\n\n    // Crate a simple modal.\n    modal = await Modal.create({\n        title: getString('overallfeedback_for', 'mod_quiz', rawName),\n        body: '',\n        show: true,\n        removeOnClose: true,\n        large: true,\n        templateContext: {\n            classes: 'overallfeedback',\n        },\n    });\n\n    const modalBody = modal.getBody()[0];\n    // Set quiz ID and grade item ID for later actions.\n    modalBody.dataset.quizid = quizId;\n    modalBody.dataset.gradeItemId = gradeItemId;\n    // Start loading icon.\n    await addIconToContainer(modalBody, pending);\n    // Load existing overall feedback based on the specific grade item ID.\n    // If no feedback exists, display a sample feedback with a boundary of 100%.\n    const fragment = Fragment.loadFragment('mod_quiz', 'load_overall_feedback_data', contextId, {\n        quizId,\n        gradeItemId,\n    });\n\n    fragment.done(function(html, js) {\n        // Set to body.\n        // modalBody.innerHTML = html;\n        modal.setBody(html);\n        // Need to wait util html already appended into DOM.\n        setTimeout(() => {\n            // Run js.\n            runTemplateJS(js);\n        }, 500);\n        // Enable submit button.\n        updateStatusFooterButton(false);\n        // Add event for the divider.\n        modalBody.querySelectorAll('.divider button.feedbackadd-button').forEach(addFeedback => {\n            addFeedback.dataset.eventAttached = 'true';\n            addFeedback.addEventListener('click', e => {\n                e.preventDefault();\n                handleAddMoreFeedback(e, modalBody, contextId);\n            });\n        });\n        // Add events for every button in the footer.\n        modalBody.querySelectorAll('.modal-footer input[type=\"submit\"]').forEach(input => {\n            input.addEventListener('click', handleSubmitModal);\n        });\n\n        pending.resolve();\n    });\n};\n\n/**\n * A function to handle events when the user tries to click on the save or cancel button in a modal.\n *\n * @param {Event} e click event.\n */\nconst handleSubmitModal = (e) => {\n    e.preventDefault();\n    const target = e.currentTarget;\n    const action = target.dataset.action;\n    switch (action) {\n        case \"cancel\":\n            // Must destroy it to allow the editor JS to run when we reopen the modal.\n            modal.destroy();\n            break;\n        case \"save\":\n            // Validate and then save the feedback.\n            saveFeedback();\n            break;\n        default:\n            break;\n    }\n};\n\n/**\n * Toggle the status of the footer buttons.\n *\n * @param {Boolean} status True indicates that the button is disabled..\n */\nconst updateStatusFooterButton = (status) => {\n    modal.getBody()[0].querySelectorAll('.modal-footer input').forEach(inputEl => {\n        inputEl.disabled = status;\n    });\n};\n\n/**\n * Validate the form data and save the feedback if it's valid.\n *\n */\nconst saveFeedback = async() => {\n    // Browse through every element in the modal form and collect them into an object.\n    const formData = collectFormData();\n    updateStatusFooterButton(true);\n    const gradeItemId = parseInt(modal.getBody()[0].dataset.gradeItemId);\n    const options = {\n        methodname: 'mod_quiz_save_overall_feedback_per_grade_item',\n        args: {\n            formdata: JSON.stringify(formData),\n            quizid: parseInt(modal.getBody()[0].dataset.quizid),\n            gradeitemid: parseInt(modal.getBody()[0].dataset.gradeItemId),\n        },\n    };\n\n    try {\n        // Validate form data and save it.\n        const result = await fetchMany([options])[0];\n        // Toggle error messages.\n        const errors = JSON.parse(result.errors);\n        displayErrors(errors);\n        // If the form data is valid.\n        if (errors.length === 0) {\n            // Update icon and title for the menu-item.\n            // Since the page does not reload, we must change it manually.\n            const addOverallFeedbackMenu = document.querySelector(SELECTORS.gradeItemList +\n                ` tr[data-quiz-grade-item-id=\"${gradeItemId}\"] .moodle-actionmenu a.dropdown-item[data-action-add-feedback]`);\n            const {key, title} = await getIconFeedback(parseInt(result.total));\n            const icon = await renderPix(key, 'core', title);\n            addOverallFeedbackMenu.innerHTML = icon + title;\n            // Must destroy it to allow the editor JS to run when we reopen the modal.\n            modal.destroy();\n        }\n        updateStatusFooterButton(false);\n    } catch (e) {\n        updateStatusFooterButton(false);\n        Notification.exception(e);\n    }\n};\n\n/**\n * Prepare the type icon and title before rendering the icon for updating menu items in the overall feedback dropdown list.\n *\n * @param {Number} totalFeedback Number of feedback entries in the grade item.\n * @returns {Object} Return type of icon and title.\n */\nconst getIconFeedback = async(totalFeedback) => {\n    let title = '';\n    let key = 't/edit';\n    switch (totalFeedback) {\n        case 0:\n            title = await getString('addoverallfeedback', 'quiz');\n            key = 't/add';\n            break;\n        case 1:\n            title = await getString('editoverallfeedback1level', 'quiz');\n            break;\n        default:\n            title = await getString('editoverallfeedbacknlevels', 'quiz', totalFeedback);\n            break;\n    }\n\n    return {key, title};\n};\n\n/**\n * Display error messages for every form element that exists in the errors object.\n *\n * @param {Object} errors Errors object.\n */\nconst displayErrors = (errors) => {\n    const body = modal.getBody()[0];\n    let feedbackTextIndex = 0;\n\n    // We need to go through all the input elements to display error messages\n    // for invalid inputs and clear error messages for valid ones.\n    body.querySelectorAll('form .fitem').forEach(el => {\n        // Check the container type. It can be static, text (boundaries), or editor (feedback).\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        switch (type) {\n            case 'text': {\n                const inputBoundary = el.querySelector('input[name^=\"feedbackboundaries\"]');\n                const errorText = errors[inputBoundary.name];\n                const feedback = inputBoundary.closest('.felement').querySelector('.invalid-feedback');\n                if (errorText) {\n                    // If an error occurs with the feedback boundaries input, we need to display an error message.\n                    inputBoundary.classList.add('is-invalid');\n                    inputBoundary.setAttribute('autofocus', true);\n                    feedback.classList.add('d-block');\n                    feedback.innerText = errorText;\n                    inputBoundary.setAttribute('aria-describedby', feedback.id);\n                } else {\n                    // If the feedback boundaries input is valid, we need to remove the error message.\n                    inputBoundary.classList.remove('is-invalid');\n                    inputBoundary.removeAttribute('autofocus');\n                    feedback.classList.remove('d-block');\n                    feedback.innerText = '';\n                }\n            }\n                break;\n            case 'editor': {\n                const textAreaFeedback = el.querySelector('textarea[name^=\"feedbacktext\"]');\n               // Skip the first editor when the boundary is 100%.\n                if (textAreaFeedback.id === 'id_feedbacktext_0_text') {\n                    break;\n                }\n                const errorText = errors[`feedbacktext[${feedbackTextIndex}]`];\n                const feedbackEl = el.querySelector('.invalid-feedback');\n                if (errorText) {\n                    feedbackEl.innerText = errorText;\n                    feedbackEl.classList.add('d-block');\n                } else {\n                    feedbackEl.innerText = '';\n                    feedbackEl.classList.remove('d-block');\n                }\n                feedbackTextIndex++;\n            }\n                break;\n            default:\n                break;\n        }\n    });\n};\n\n/**\n * Collect form data in overall feedback form.\n *\n * @return {Array} Form data array.\n */\nconst collectFormData = () => {\n    const items = modal.getBody()[0].querySelectorAll('form .fitem');\n    const formData = [];\n    const itemData = {};\n    items.forEach((el) => {\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        if (type) {\n            switch (type) {\n                case 'static':\n                    // It's just sample data. It doesn't need to be true grade data.\n                    itemData.boundary = 11;\n                    break;\n                case 'text':\n                    itemData.boundary = el.querySelector('input[name^=\"feedbackboundaries\"]').value;\n                    break;\n                case 'editor':\n                    itemData.feedback = {\n                        itemid: el.querySelector('input[type=\"hidden\"][name$=\"[itemid]\"]').value,\n                        format: el.querySelector('input[type=\"hidden\"][name$=\"[format]\"]').value,\n                        text: el.querySelector('textarea[name^=\"feedbacktext\"]').value,\n                    };\n                    formData.push({...itemData});\n                    break;\n                default:\n                    break;\n            }\n        }\n    });\n\n    return formData;\n};\n\n/**\n * A function to handle adding more feedback in the overall feedback modal.\n *\n * @param {Event} e click event.\n * @param {HTMLElement} modalBody Modal body element.\n * @param {Number} contextId Context id number.\n */\nconst handleAddMoreFeedback = async(e, modalBody, contextId) => {\n    const target = e.currentTarget;\n    const {after} = target.dataset;\n    const numberOfEditors = modalBody.querySelectorAll('textarea[name^=feedbacktext]').length;\n    const gradeItemId = modal.getBody()[0].dataset.gradeItemId;\n    const fragment = Fragment.loadFragment('mod_quiz', 'load_overall_feedback_form', contextId, {\n        after,\n        no: numberOfEditors,\n        gradeitemid: parseInt(gradeItemId),\n    });\n    const divider = modalBody.querySelector(`.modal-body .divider button[data-after=\"${after}\"]`).closest('.divider');\n    fragment.done(function(html, js) {\n        divider.insertAdjacentHTML('afterend', html);\n        runTemplateJS(js);\n        recalculateFeedbackIndex(modalBody, after, contextId);\n    });\n};\n\n/**\n * Every time a new feedback is added to the form, we need to calculate the order number and update it for all elements.\n *\n * @param {HTMLElement} modalBody Modal body element.\n * @param {Number} after The order number used to detect the position to add new feedback.\n * @param {Number} contextId Context id number.\n */\nconst recalculateFeedbackIndex = (modalBody, after, contextId) => {\n    const gradeBoundaryEls = modalBody.querySelectorAll('input[name^=\"feedbackboundaries\"]');\n    const dividerButtonEls = modalBody.querySelectorAll('.divider button');\n    gradeBoundaryEls.forEach((el, key) => {\n        if (key >= after) {\n            // Re-update id or label for every elements.\n            const wrapItem = el.closest('.fitem');\n            const label = wrapItem.querySelector('label[id^=\"id_feedbackboundaries_\"]');\n            const inputBoundary = wrapItem.querySelector('input[name^=\"feedbackboundaries\"]');\n            wrapItem.id = 'fitem_id_feedbackboundaries_' + key;\n            label.id = `id_feedbackboundaries_${key}_label`;\n            label.setAttribute('for', `id_feedbackboundaries_${key}`);\n            inputBoundary.id = 'id_feedbackboundaries_' + key;\n            inputBoundary.name = `feedbackboundaries[${key}]`;\n            wrapItem.querySelector('.invalid-feedback').id = 'id_error_feedbackboundaries_' + key;\n        }\n    });\n\n    // Re-update devider.\n    dividerButtonEls.forEach((el, key) => {\n        el.dataset.after = key;\n        getString('insertfeedbackbefore', 'mod_quiz', {afterindex: key}).then(string => {\n            el.setAttribute('aria-label', string);\n            return true;\n        }).catch(() => {\n            return false;\n        });\n        // Add event for the new divider that was just loaded.\n        if (el.dataset.eventAttached === 'false') {\n            // Set a flag if the button already has an event added.\n            el.dataset.eventAttached = 'true';\n            el.addEventListener('click', e => {\n                e.preventDefault();\n                handleAddMoreFeedback(e, modalBody, contextId);\n            });\n        }\n    });\n};\n\n/**\n * Handle click events on the delete icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemDelete = (e) => {\n    e.preventDefault();\n    const pending = new Pending('delete-quiz-grade-item');\n\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    let nextItemToFocus;\n    if (tableRow.nextElementSibling) {\n        nextItemToFocus = SELECTORS.updateGradeItemLink(tableRow.nextElementSibling.dataset.quizGradeItemId);\n    } else {\n        nextItemToFocus = SELECTORS.addGradeItemButton;\n    }\n\n    deleteGradeItem(quizId, gradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(nextItemToFocus).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n *\n * @param {HTMLElement} editableSpan the editable to turn off.\n */\nconst stopEditingGadeItem = (editableSpan) => {\n    editableSpan.innerHTML = editableSpan.dataset.oldContent;\n    delete editableSpan.dataset.oldContent;\n\n    editableSpan.classList.remove('inplaceeditingon');\n    editableSpan.querySelector('[data-action-edit]').focus();\n};\n\n/**\n * Handle click events on the start rename icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemEditStart = (e) => {\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-start');\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditable);\n\n    document.querySelectorAll(SELECTORS.inplaceEditableOn).forEach(stopEditingGadeItem);\n\n    editableSpan.dataset.oldContent = editableSpan.innerHTML;\n    getString('edittitleinstructions')\n        .then((instructions) => {\n            const uniqueId = 'gi-edit-input-' + editableSpan.closest('tr').dataset.quizGradeItemId;\n            editableSpan.innerHTML = '<span class=\"editinstructions\">' + instructions + '</span>' +\n                    '<label class=\"sr-only\" for=\"' + uniqueId + '\">' + editableSpan.dataset.editLabel + '</label>' +\n                    '<input type=\"text\" id=\"' + uniqueId + '\" value=\"' + editableSpan.dataset.rawName +\n                            '\" class=\"ignoredirty form-control w-100\">';\n\n            const inputElement = editableSpan.querySelector('input');\n            inputElement.focus();\n            inputElement.select();\n            editableSpan.classList.add('inplaceeditingon');\n            pending.resolve();\n            return null;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key down in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyDown = (e) => {\n    if (e.keyCode !== 13) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-save');\n\n    const newName = editableSpan.querySelector('input').value;\n    const tableCell = e.target.closest('th');\n    addIconToContainer(tableCell);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    updateGradeItem(quizId, gradeItemId, newName)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.updateGradeItemLink(gradeItemId)).focus({'focusVisible': true});\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the contents of the page with the page re-rendered from the provided data, once that promise resolves.\n *\n * @param {Object} editGradingPageData the template context data required to re-render the page.\n * @returns {Promise<void>} a promise that will resolve when the page is updated.\n */\nconst reRenderPage = (editGradingPageData) =>\n    renderTemplate('mod_quiz/edit_grading_page', editGradingPageData)\n        .then((html, js) => replaceNode(document.querySelector(SELECTORS.editingPageContents), html, js || ''));\n\n/**\n * Handle key up in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyUp = (e) => {\n    if (e.keyCode !== 27) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle focus out of the editable.\n *\n * @param {Event} e event.\n */\nconst handleGradeItemFocusOut = (e) => {\n    if (MoodleConfig.behatsiterunning) {\n        // Behat triggers focusout too often so ignore.\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle when the selected grade item for a slot is changed.\n *\n * @param {Event} e event.\n */\nconst handleSlotGradeItemChanged = (e) => {\n    const select = e.target.closest(SELECTORS.gradeItemSelect);\n\n    // Check this click is on a relevant element.\n    if (!select || !select.closest(SELECTORS.slotList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-slot-grade-item-updated');\n\n    const slotId = select.dataset.slotId;\n    const newGradeItemId = select.value ? select.value : null;\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const quizId = tableCell.closest('table').dataset.quizId;\n\n    updateSlotGradeItem(quizId, slotId, newGradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.gradeItemSelectId(slotId)).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks in the table the shows the grade items.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemClick = (e) => {\n    const link = e.target.closest('a');\n\n    // Check this click is on a relevant element.\n    if (!link || !link.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    if (link.dataset.actionDelete) {\n        handleGradeItemDelete(e);\n    }\n\n    if (link.dataset.actionEdit) {\n        handleGradeItemEditStart(e);\n    }\n\n    if (link.dataset.actionAddFeedback) {\n        handleGradeItemAddFeedback(e);\n    }\n};\n\n/**\n * Handle clicks on the buttons.\n *\n * @param {Event} e click event.\n */\n\nconst handleButtonClick = (e) => {\n    if (e.target.closest(SELECTORS.addGradeItemButton)) {\n        handleAddGradeItemClick(e);\n    }\n    if (e.target.closest(SELECTORS.autoSetupButton)) {\n        handleAutoSetup(e);\n    }\n    if (e.target.closest(SELECTORS.resetAllButton)) {\n        handleResetAllClick(e);\n    }\n};\n\n/**\n * Handle clicks on the 'Add grade item' button.\n *\n * @param {Event} e click event.\n */\nconst handleAddGradeItemClick = (e) => {\n    e.preventDefault();\n    const pending = new Pending('create-quiz-grade-item');\n    addIconToContainer(e.target.parentNode, pending);\n\n    const quizId = e.target.dataset.quizId;\n\n    createGradeItem(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleAutoSetup = (e) => {\n    e.preventDefault();\n    const pending = new Pending('setup-quiz-grade-items');\n\n    const quizId = e.target.dataset.quizId;\n\n    autoSetupGradeItems(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.resetAllButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleResetAllClick = (e) => {\n    e.preventDefault();\n    const button = e.target;\n\n    Notification.deleteCancelPromise(\n        getString('gradeitemsremoveallconfirm', 'quiz'),\n        getString('gradeitemsremoveallmessage', 'quiz'),\n        getString('reset'),\n        button\n    ).then(() => reallyResetAll(button))\n    .catch(() => button.focus());\n};\n\n/**\n * Really reset all if the confirmation is OKed.\n *\n * @param {HTMLElement} button the reset button.\n */\nconst reallyResetAll = (button) => {\n    const pending = new Pending('reset-quiz-grading');\n    addIconToContainer(button.parentNode, pending);\n\n    const quizId = button.dataset.quizId;\n\n    let methodCalls = [];\n\n    // Call to clear any assignments of grade items to slots (if required).\n    const slotResets = [...document.querySelectorAll(SELECTORS.gradeItemSelect)].map(\n            (select) => ({\n                id: select.dataset.slotId,\n                quizgradeitemid: 0,\n            }));\n    if (slotResets.length) {\n        methodCalls.push({\n            methodname: 'mod_quiz_update_slots',\n            args: {\n                quizid: quizId,\n                slots: slotResets\n            }\n        });\n    }\n\n    // Request to delete all the grade items.\n    methodCalls.push({\n        methodname: 'mod_quiz_delete_grade_items',\n        args: {\n            quizid: quizId,\n            quizgradeitems: [...document.querySelectorAll(SELECTORS.gradeItemTr)].map((tr) => {\n                return {id: tr.dataset.quizGradeItemId};\n            })\n        }\n    });\n\n    callServicesAndReturnRenderingData(methodCalls)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the container with a new version.\n */\nconst registerEventListeners = () => {\n    document.body.addEventListener('click', handleGradeItemClick);\n    document.body.addEventListener('keydown', handleGradeItemKeyDown);\n    document.body.addEventListener('keyup', handleGradeItemKeyUp);\n    document.body.addEventListener('focusout', handleGradeItemFocusOut);\n\n    document.body.addEventListener('click', handleButtonClick);\n\n    document.body.addEventListener('change', handleSlotGradeItemChanged);\n};\n\n/**\n * Entry point.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["SELECTORS","id","modal","callServiceAndReturnRenderingData","methodCall","callServicesAndReturnRenderingData","methodCalls","push","methodname","args","quizid","Promise","all","then","results","JSON","parse","at","handleSubmitModal","e","preventDefault","currentTarget","dataset","action","destroy","saveFeedback","updateStatusFooterButton","status","getBody","querySelectorAll","forEach","inputEl","disabled","async","formData","collectFormData","gradeItemId","parseInt","options","formdata","stringify","gradeitemid","result","errors","displayErrors","length","addOverallFeedbackMenu","document","querySelector","key","title","getIconFeedback","total","icon","innerHTML","exception","totalFeedback","body","feedbackTextIndex","el","_el$querySelector","_el$querySelector$dat","fieldtype","inputBoundary","errorText","name","feedback","closest","classList","add","setAttribute","innerText","remove","removeAttribute","feedbackEl","items","itemData","type","_el$querySelector2","_el$querySelector2$da","boundary","value","itemid","format","text","handleAddMoreFeedback","modalBody","contextId","target","after","numberOfEditors","fragment","Fragment","loadFragment","no","divider","done","html","js","insertAdjacentHTML","recalculateFeedbackIndex","gradeBoundaryEls","dividerButtonEls","wrapItem","label","afterindex","string","catch","eventAttached","addEventListener","handleGradeItemDelete","pending","Pending","tableCell","tableRow","quizId","quizGradeItemId","nextItemToFocus","nextElementSibling","quizgradeitems","deleteGradeItem","reRenderPage","resolve","focus","Notification","stopEditingGadeItem","editableSpan","oldContent","handleGradeItemKeyDown","keyCode","newName","updateGradeItem","editGradingPageData","handleGradeItemKeyUp","handleGradeItemFocusOut","MoodleConfig","behatsiterunning","handleSlotGradeItemChanged","select","slotId","newGradeItemId","slots","quizgradeitemid","updateSlotGradeItem","handleGradeItemClick","link","actionDelete","actionEdit","instructions","uniqueId","editLabel","rawName","inputElement","handleGradeItemEditStart","actionAddFeedback","Number","contextid","Modal","create","show","removeOnClose","large","templateContext","classes","setBody","setTimeout","addFeedback","input","handleGradeItemAddFeedback","handleButtonClick","handleAddGradeItemClick","handleAutoSetup","handleResetAllClick","parentNode","createGradeItem","autoSetupGradeItems","button","deleteCancelPromise","reallyResetAll","slotResets","map","tr"],"mappings":"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"}
{"version":3,"file":"edit_multiple_grades.min.js","sources":["../src/edit_multiple_grades.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for managing multiple grade items for a quiz.\n *\n * @module     mod_quiz/edit_multiple_grades\n * @copyright  2023 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport MoodleConfig from 'core/config';\nimport {addIconToContainer} from 'core/loadingicon';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\nimport {get_string as getString} from 'core/str';\nimport * as Templates from 'core/templates';\nimport Modal from 'core/modal';\nimport {prefetchStrings} from 'core/prefetch';\nimport Fragment from 'core/fragment';\n\n/**\n * @type {Object} selectors used in this code.\n */\nconst SELECTORS = {\n    'addGradeItemButton': '#mod_quiz-add_grade_item',\n    'autoSetupButton': '#mod_quiz-grades_auto_setup',\n    'editingPageContents': '#edit_grading_page-contents',\n    'gradeItemList': 'table#mod_quiz-grade-item-list',\n    'gradeItemSelect': 'select[data-slot-id]',\n    'gradeItemSelectId': (id) => 'select#grade-item-choice-' + id,\n    'gradeItemTr': 'table#mod_quiz-grade-item-list tr[data-quiz-grade-item-id]',\n    'inplaceEditable': 'span.inplaceeditable',\n    'inplaceEditableOn': 'span.inplaceeditable.inplaceeditingon',\n    'resetAllButton': '#mod_quiz-grades_reset_all',\n    'slotList': 'table#mod_quiz-slot-list',\n    'updateGradeItemLink': (id) => 'tr[data-quiz-grade-item-id=\"' + id + '\"] .quickeditlink',\n};\n\nprefetchStrings('mod_quiz', [\n    'overallfeedback_for',\n    'insertfeedbackbefore',\n]);\n\nlet modal;\n\n/**\n * Call the Ajax service to create a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst createGradeItem = (\n    quizId,\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{name: ''}],\n    }\n});\n\n/**\n * Call the Ajax service to update a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to update.\n * @param {String} newName the new name to set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateGradeItem = (\n    quizId,\n    gradeItemId,\n    newName\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId, name: newName}],\n    }\n});\n\n/**\n * Call the Ajax service to delete a quiz grade item.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} gradeItemId id of the grade item to delete.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst deleteGradeItem = (\n    quizId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_delete_grade_items',\n    args: {\n        quizid: quizId,\n        quizgradeitems: [{id: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to update the quiz grade item used by a slot.\n *\n * @param {Number} quizId id of the quiz to update.\n * @param {Number} slotId id of the slot to update.\n * @param {Number|null} gradeItemId new grade item ot set, or null to un-set.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst updateSlotGradeItem = (\n    quizId,\n    slotId,\n    gradeItemId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_update_slots',\n    args: {\n        quizid: quizId,\n        slots: [{id: slotId, quizgradeitemid: gradeItemId}],\n    }\n});\n\n/**\n * Call the Ajax service to setup one grade item for each quiz section.\n *\n * @param {Number} quizId id of the quiz to update.\n * @return {Promise} Promise that resolves to the context required to re-render the page.\n */\nconst autoSetupGradeItems = (\n    quizId\n) => callServiceAndReturnRenderingData({\n    methodname: 'mod_quiz_create_grade_item_per_section',\n    args: {\n        quizid: quizId\n    }\n});\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object} methodCall a web service call to pass to fetchMany. Must include methodCall.args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServiceAndReturnRenderingData = (methodCall) => callServicesAndReturnRenderingData([methodCall]);\n\n/**\n * Make a web service call, and also call mod_quiz_get_edit_grading_page_data to get the date to re-render the page.\n *\n * @param {Object[]} methodCalls web service calls to pass to fetchMany. Must include methodCalls[0].args.quizid.\n * @returns {Promise<Object>} a promise that resolves to the template context required to re-render the page.\n */\nconst callServicesAndReturnRenderingData = (methodCalls) => {\n    methodCalls.push({\n            methodname: 'mod_quiz_get_edit_grading_page_data',\n            args: {\n                quizid: methodCalls[0].args.quizid,\n            }\n        });\n    return Promise.all(fetchMany(methodCalls))\n    .then(results => JSON.parse(results.at(-1)));\n};\n\n/**\n * A function to handle the event of adding overall feedback for each grade item.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemAddFeedback = async(e) => {\n    e.preventDefault();\n    const pending = new Pending('add-overall-feedback');\n    const tableCell = e.target.closest('td');\n    const tableRow = tableCell.closest('tr');\n    const contextId = Number(e.target.closest('a').dataset.contextid);\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n    const rawName = tableRow.querySelector('th span.inplaceeditable').dataset.rawName;\n\n    // Create a modal instance contains the overall feedbacks.\n    modal = await Modal.create({\n        title: getString('overallfeedback_for', 'mod_quiz', rawName),\n        body: '',\n        show: true,\n        removeOnClose: true,\n        large: true,\n        templateContext: {\n            classes: 'overallfeedback',\n        },\n    });\n\n    const modalBody = modal.getBody()[0];\n    // Set the quiz ID and grade item ID in the modal body to allow retrieval later.\n    modalBody.dataset.quizid = quizId;\n    modalBody.dataset.gradeItemId = gradeItemId;\n    // Show the loading icon.\n    addIconToContainer(modalBody, pending);\n    // Load existing overall feedback based on the specific grade item ID.\n    // If no feedback exists, display a sample feedback with a boundary of 100%.\n    Fragment.loadFragment('mod_quiz', 'load_overall_feedback_data', contextId, {\n        quizId,\n        gradeItemId,\n    }).done(function(html, js) {\n        // Set the overall feedback form data into the modal body.\n        modal.setBody(html);\n        // Wait until the HTML is fully appended to the DOM before running the JavaScript code.\n        setTimeout(() => {\n            Templates.runTemplateJS(js);\n        }, 500);\n        // Enable the footer buttons to allow user interaction with them.\n        updateStatusFooterButton(false);\n        // Add event for the divider.\n        // After the template loads, events need to be added to all dividers to allow users to add more overall feedback.\n        modalBody.querySelectorAll('.divider button.feedbackadd-button').forEach(addFeedback => {\n            // Set a flag to mark that the event has already been attached.\n            addFeedback.dataset.eventAttached = 'true';\n            addFeedback.addEventListener('click', e => {\n                e.preventDefault();\n                handleAddMoreFeedback(e, modalBody, contextId);\n            });\n        });\n        // The form's submit button will be handled by JavaScript, so we need to add an event to manage it.\n        modalBody.querySelectorAll('.modal-footer input[type=\"submit\"]').forEach(input => {\n            input.addEventListener('click', handleSubmitModal);\n        });\n\n        pending.resolve();\n    });\n};\n\n/**\n * A function to handle events when the user tries to click on the save or cancel button in a modal.\n *\n * @param {Event} e click event.\n */\nconst handleSubmitModal = (e) => {\n    e.preventDefault();\n    const target = e.currentTarget;\n    const action = target.dataset.action;\n    switch (action) {\n        case \"cancel\":\n            // Must destroy it to allow the editor JS to run when we reopen the modal.\n            modal.destroy();\n            break;\n        case \"save\":\n            // Validate and then save the feedback.\n            saveFeedback();\n            break;\n        default:\n            break;\n    }\n};\n\n/**\n * Toggle the status of the footer buttons.\n *\n * @param {Boolean} status True indicates that the button is disabled..\n */\nconst updateStatusFooterButton = (status) => {\n    modal.getBody()[0].querySelectorAll('.modal-footer input').forEach(inputEl => {\n        inputEl.disabled = status;\n    });\n};\n\n/**\n * Validate the form data and save the feedback if it's valid.\n */\nconst saveFeedback = async() => {\n    // Browse through every element in the modal form and collect them into an object.\n    const formData = collectFormData();\n    updateStatusFooterButton(true);\n    const gradeItemId = parseInt(modal.getBody()[0].dataset.gradeItemId);\n    const options = {\n        methodname: 'mod_quiz_save_overall_feedback_per_grade_item',\n        args: {\n            formdata: JSON.stringify(formData),\n            quizid: parseInt(modal.getBody()[0].dataset.quizid),\n            gradeitemid: parseInt(modal.getBody()[0].dataset.gradeItemId),\n        },\n    };\n\n    try {\n        // Validate form data and save it.\n        const result = await fetchMany([options])[0];\n        // Toggle error messages.\n        const errors = JSON.parse(result.errors);\n        displayErrors(errors);\n        // If the form data is valid.\n        if (errors.length === 0) {\n            // Update icon and title for the menu-item.\n            // Since the page does not reload, we must change it manually.\n            const gradeItemRow = document.querySelector(SELECTORS.gradeItemList +\n                ` tr[data-quiz-grade-item-id=\"${gradeItemId}\"]`);\n            const addOverallFeedbackMenu = gradeItemRow\n                .querySelector('.moodle-actionmenu a.dropdown-item[data-action-add-feedback]');\n            const {key, title, titleLevelFeedback} = await getIconFeedback(parseInt(result.total));\n            const icon = await Templates.renderPix(key, 'core', title);\n            addOverallFeedbackMenu.innerHTML = icon + title;\n            gradeItemRow.querySelector('td.total-overallfeedback').innerText = titleLevelFeedback;\n            // Must destroy it to allow the editor JS to run when we reopen the modal.\n            modal.destroy();\n        }\n        updateStatusFooterButton(false);\n    } catch (e) {\n        updateStatusFooterButton(false);\n        Notification.exception(e);\n    }\n};\n\n/**\n * Prepare the type icon and title before rendering the icon for updating menu items in the overall feedback dropdown list.\n *\n * @param {Number} totalFeedback Number of feedback entries in the grade item.\n * @returns {Object} Return type of icon and title.\n */\nconst getIconFeedback = async(totalFeedback) => {\n    let title = '';\n    let titleLevelFeedback = '';\n    let key = 't/edit';\n    switch (totalFeedback) {\n        case 0:\n            title = await getString('addoverallfeedback', 'quiz');\n            titleLevelFeedback = '-';\n            key = 't/add';\n            break;\n        case 1:\n            title = await getString('editoverallfeedback1level', 'quiz');\n            titleLevelFeedback = await getString('overallfeedback1level', 'quiz', 1);\n            break;\n        default:\n            title = await getString('editoverallfeedbacknlevels', 'quiz', totalFeedback);\n            titleLevelFeedback = await getString('overallfeedbacknlevels', 'quiz', totalFeedback);\n            break;\n    }\n\n    return {key, title, titleLevelFeedback};\n};\n\n/**\n * Display error messages for every form element that exists in the errors object.\n *\n * @param {Object} errors Errors object.\n */\nconst displayErrors = (errors) => {\n    const body = modal.getBody()[0];\n    let feedbackTextIndex = 0;\n\n    // We need to go through all the input elements to display error messages\n    // for invalid inputs and clear error messages for valid ones.\n    body.querySelectorAll('form .fitem').forEach(el => {\n        // Check the container type. It can be static, text (boundaries), or editor (feedback).\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        switch (type) {\n            case 'text': {\n                const inputBoundary = el.querySelector('input[name^=\"feedbackboundaries\"]');\n                const errorText = errors[inputBoundary.name];\n                const feedback = inputBoundary.closest('.felement').querySelector('.invalid-feedback');\n                if (errorText) {\n                    // If an error occurs with the feedback boundaries input, we need to display an error message.\n                    inputBoundary.classList.add('is-invalid');\n                    inputBoundary.setAttribute('autofocus', true);\n                    feedback.classList.add('d-block');\n                    feedback.innerText = errorText;\n                    inputBoundary.setAttribute('aria-describedby', feedback.id);\n                } else {\n                    // If the feedback boundaries input is valid, we need to remove the error message.\n                    inputBoundary.classList.remove('is-invalid');\n                    inputBoundary.removeAttribute('autofocus');\n                    feedback.classList.remove('d-block');\n                    feedback.innerText = '';\n                }\n            }\n                break;\n            case 'editor': {\n                const textAreaFeedback = el.querySelector('textarea[name^=\"feedbacktext\"]');\n               // Skip the first editor when the boundary is 100%.\n                if (textAreaFeedback.id === 'id_feedbacktext_0_text') {\n                    break;\n                }\n                const errorText = errors[`feedbacktext[${feedbackTextIndex}]`];\n                const feedbackEl = el.querySelector('.invalid-feedback');\n                if (errorText) {\n                    feedbackEl.innerText = errorText;\n                    feedbackEl.classList.add('d-block');\n                } else {\n                    feedbackEl.innerText = '';\n                    feedbackEl.classList.remove('d-block');\n                }\n                feedbackTextIndex++;\n            }\n                break;\n            default:\n                break;\n        }\n    });\n};\n\n/**\n * Collect form data in overall feedback form.\n *\n * @return {Array} Form data array.\n */\nconst collectFormData = () => {\n    const items = modal.getBody()[0].querySelectorAll('form .fitem');\n    const formData = [];\n    const itemData = {};\n    items.forEach((el) => {\n        const type = el.querySelector('[data-fieldtype]')?.dataset?.fieldtype;\n        if (type) {\n            switch (type) {\n                case 'static':\n                    // It's just sample data. It doesn't need to be true grade data.\n                    itemData.boundary = 11;\n                    break;\n                case 'text':\n                    itemData.boundary = el.querySelector('input[name^=\"feedbackboundaries\"]').value;\n                    break;\n                case 'editor':\n                    itemData.feedback = {\n                        itemid: el.querySelector('input[type=\"hidden\"][name$=\"[itemid]\"]').value,\n                        format: el.querySelector('input[type=\"hidden\"][name$=\"[format]\"]').value,\n                        text: el.querySelector('textarea[name^=\"feedbacktext\"]').value,\n                    };\n                    formData.push({...itemData});\n                    break;\n                default:\n                    break;\n            }\n        }\n    });\n\n    return formData;\n};\n\n/**\n * A function to handle adding more feedback in the overall feedback modal.\n *\n * @param {Event} e click event.\n * @param {HTMLElement} modalBody Modal body element.\n * @param {Number} contextId Context id number.\n */\nconst handleAddMoreFeedback = async(e, modalBody, contextId) => {\n    const target = e.currentTarget;\n    const {after} = target.dataset;\n    const numberOfEditors = modalBody.querySelectorAll('textarea[name^=feedbacktext]').length;\n    const gradeItemId = modal.getBody()[0].dataset.gradeItemId;\n    const divider = modalBody.querySelector(`.modal-body .divider button[data-after=\"${after}\"]`)\n        .closest('.divider');\n    Fragment.loadFragment('mod_quiz', 'load_overall_feedback_form', contextId, {\n        after,\n        no: numberOfEditors,\n        gradeitemid: parseInt(gradeItemId),\n    }).done(function(html, js) {\n        divider.insertAdjacentHTML('afterend', html);\n        Templates.runTemplateJS(js);\n        recalculateFeedbackIndex(modalBody, after, contextId);\n    });\n};\n\n/**\n * Every time a new feedback is added to the form, we need to calculate the order number and update it for all elements.\n *\n * @param {HTMLElement} modalBody Modal body element.\n * @param {Number} after The order number used to detect the position to add new feedback.\n * @param {Number} contextId Context id number.\n */\nconst recalculateFeedbackIndex = (modalBody, after, contextId) => {\n    const gradeBoundaryEls = modalBody.querySelectorAll('input[name^=\"feedbackboundaries\"]');\n    const dividerButtonEls = modalBody.querySelectorAll('.divider button');\n    gradeBoundaryEls.forEach((el, key) => {\n        if (key >= after) {\n            // Re-update id or label for every elements.\n            const wrapItem = el.closest('.fitem');\n            const label = wrapItem.querySelector('label[id^=\"id_feedbackboundaries_\"]');\n            const inputBoundary = wrapItem.querySelector('input[name^=\"feedbackboundaries\"]');\n            wrapItem.id = 'fitem_id_feedbackboundaries_' + key;\n            label.id = `id_feedbackboundaries_${key}_label`;\n            label.setAttribute('for', `id_feedbackboundaries_${key}`);\n            inputBoundary.id = 'id_feedbackboundaries_' + key;\n            inputBoundary.name = `feedbackboundaries[${key}]`;\n            wrapItem.querySelector('.invalid-feedback').id = 'id_error_feedbackboundaries_' + key;\n        }\n    });\n\n    // Re-update devider.\n    dividerButtonEls.forEach((el, key) => {\n        el.dataset.after = key;\n        getString('insertfeedbackbefore', 'mod_quiz', {afterindex: key}).then(string => {\n            el.setAttribute('aria-label', string);\n            return true;\n        }).catch(() => {\n            return false;\n        });\n        // Add event for the new divider that was just loaded.\n        if (el.dataset.eventAttached === 'false') {\n            // Set a flag if the button already has an event added.\n            el.dataset.eventAttached = 'true';\n            el.addEventListener('click', e => {\n                e.preventDefault();\n                handleAddMoreFeedback(e, modalBody, contextId);\n            });\n        }\n    });\n};\n\n/**\n * Handle click events on the delete icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemDelete = (e) => {\n    e.preventDefault();\n    const pending = new Pending('delete-quiz-grade-item');\n\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    let nextItemToFocus;\n    if (tableRow.nextElementSibling) {\n        nextItemToFocus = SELECTORS.updateGradeItemLink(tableRow.nextElementSibling.dataset.quizGradeItemId);\n    } else {\n        nextItemToFocus = SELECTORS.addGradeItemButton;\n    }\n\n    deleteGradeItem(quizId, gradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(nextItemToFocus).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n *\n * @param {HTMLElement} editableSpan the editable to turn off.\n */\nconst stopEditingGadeItem = (editableSpan) => {\n    editableSpan.innerHTML = editableSpan.dataset.oldContent;\n    delete editableSpan.dataset.oldContent;\n\n    editableSpan.classList.remove('inplaceeditingon');\n    editableSpan.querySelector('[data-action-edit]').focus();\n};\n\n/**\n * Handle click events on the start rename icon.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemEditStart = (e) => {\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-start');\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditable);\n\n    document.querySelectorAll(SELECTORS.inplaceEditableOn).forEach(stopEditingGadeItem);\n\n    editableSpan.dataset.oldContent = editableSpan.innerHTML;\n    getString('edittitleinstructions')\n        .then((instructions) => {\n            const uniqueId = 'gi-edit-input-' + editableSpan.closest('tr').dataset.quizGradeItemId;\n            editableSpan.innerHTML = '<span class=\"editinstructions\">' + instructions + '</span>' +\n                    '<label class=\"sr-only\" for=\"' + uniqueId + '\">' + editableSpan.dataset.editLabel + '</label>' +\n                    '<input type=\"text\" id=\"' + uniqueId + '\" value=\"' + editableSpan.dataset.rawName +\n                            '\" class=\"ignoredirty form-control w-100\">';\n\n            const inputElement = editableSpan.querySelector('input');\n            inputElement.focus();\n            inputElement.select();\n            editableSpan.classList.add('inplaceeditingon');\n            pending.resolve();\n            return null;\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle key down in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyDown = (e) => {\n    if (e.keyCode !== 13) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-quiz-grade-item-save');\n\n    const newName = editableSpan.querySelector('input').value;\n    const tableCell = e.target.closest('th');\n    addIconToContainer(tableCell);\n\n    const tableRow = tableCell.closest('tr');\n    const quizId = tableRow.closest('table').dataset.quizId;\n    const gradeItemId = tableRow.dataset.quizGradeItemId;\n\n    updateGradeItem(quizId, gradeItemId, newName)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.updateGradeItemLink(gradeItemId)).focus({'focusVisible': true});\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the contents of the page with the page re-rendered from the provided data, once that promise resolves.\n *\n * @param {Object} editGradingPageData the template context data required to re-render the page.\n * @returns {Promise<void>} a promise that will resolve when the page is updated.\n */\nconst reRenderPage = (editGradingPageData) =>\n    Templates.render('mod_quiz/edit_grading_page', editGradingPageData)\n        .then((html, js) => Templates.replaceNode(document.querySelector(SELECTORS.editingPageContents), html, js || ''));\n\n/**\n * Handle key up in the editable.\n *\n * @param {Event} e key event.\n */\nconst handleGradeItemKeyUp = (e) => {\n    if (e.keyCode !== 27) {\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle focus out of the editable.\n *\n * @param {Event} e event.\n */\nconst handleGradeItemFocusOut = (e) => {\n    if (MoodleConfig.behatsiterunning) {\n        // Behat triggers focusout too often so ignore.\n        return;\n    }\n\n    const editableSpan = e.target.closest(SELECTORS.inplaceEditableOn);\n\n    // Check this click is on a relevant element.\n    if (!editableSpan || !editableSpan.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    e.preventDefault();\n    stopEditingGadeItem(editableSpan);\n};\n\n/**\n * Handle when the selected grade item for a slot is changed.\n *\n * @param {Event} e event.\n */\nconst handleSlotGradeItemChanged = (e) => {\n    const select = e.target.closest(SELECTORS.gradeItemSelect);\n\n    // Check this click is on a relevant element.\n    if (!select || !select.closest(SELECTORS.slotList)) {\n        return;\n    }\n\n    e.preventDefault();\n    const pending = new Pending('edit-slot-grade-item-updated');\n\n    const slotId = select.dataset.slotId;\n    const newGradeItemId = select.value ? select.value : null;\n    const tableCell = e.target.closest('td');\n    addIconToContainer(tableCell, pending);\n\n    const quizId = tableCell.closest('table').dataset.quizId;\n\n    updateSlotGradeItem(quizId, slotId, newGradeItemId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.gradeItemSelectId(slotId)).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks in the table the shows the grade items.\n *\n * @param {Event} e click event.\n */\nconst handleGradeItemClick = (e) => {\n    const link = e.target.closest('a');\n\n    // Check this click is on a relevant element.\n    if (!link || !link.closest(SELECTORS.gradeItemList)) {\n        return;\n    }\n\n    if (link.dataset.actionDelete) {\n        handleGradeItemDelete(e);\n    }\n\n    if (link.dataset.actionEdit) {\n        handleGradeItemEditStart(e);\n    }\n\n    if (link.dataset.actionAddFeedback) {\n        handleGradeItemAddFeedback(e);\n    }\n};\n\n/**\n * Handle clicks on the buttons.\n *\n * @param {Event} e click event.\n */\n\nconst handleButtonClick = (e) => {\n    if (e.target.closest(SELECTORS.addGradeItemButton)) {\n        handleAddGradeItemClick(e);\n    }\n    if (e.target.closest(SELECTORS.autoSetupButton)) {\n        handleAutoSetup(e);\n    }\n    if (e.target.closest(SELECTORS.resetAllButton)) {\n        handleResetAllClick(e);\n    }\n};\n\n/**\n * Handle clicks on the 'Add grade item' button.\n *\n * @param {Event} e click event.\n */\nconst handleAddGradeItemClick = (e) => {\n    e.preventDefault();\n    const pending = new Pending('create-quiz-grade-item');\n    addIconToContainer(e.target.parentNode, pending);\n\n    const quizId = e.target.dataset.quizId;\n\n    createGradeItem(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleAutoSetup = (e) => {\n    e.preventDefault();\n    const pending = new Pending('setup-quiz-grade-items');\n\n    const quizId = e.target.dataset.quizId;\n\n    autoSetupGradeItems(quizId)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.resetAllButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Handle clicks on the reset button - show a confirmation.\n *\n * @param {Event} e click event.\n */\nconst handleResetAllClick = (e) => {\n    e.preventDefault();\n    const button = e.target;\n\n    Notification.deleteCancelPromise(\n        getString('gradeitemsremoveallconfirm', 'quiz'),\n        getString('gradeitemsremoveallmessage', 'quiz'),\n        getString('reset'),\n        button\n    ).then(() => reallyResetAll(button))\n    .catch(() => button.focus());\n};\n\n/**\n * Really reset all if the confirmation is OKed.\n *\n * @param {HTMLElement} button the reset button.\n */\nconst reallyResetAll = (button) => {\n    const pending = new Pending('reset-quiz-grading');\n    addIconToContainer(button.parentNode, pending);\n\n    const quizId = button.dataset.quizId;\n\n    let methodCalls = [];\n\n    // Call to clear any assignments of grade items to slots (if required).\n    const slotResets = [...document.querySelectorAll(SELECTORS.gradeItemSelect)].map(\n            (select) => ({\n                id: select.dataset.slotId,\n                quizgradeitemid: 0,\n            }));\n    if (slotResets.length) {\n        methodCalls.push({\n            methodname: 'mod_quiz_update_slots',\n            args: {\n                quizid: quizId,\n                slots: slotResets\n            }\n        });\n    }\n\n    // Request to delete all the grade items.\n    methodCalls.push({\n        methodname: 'mod_quiz_delete_grade_items',\n        args: {\n            quizid: quizId,\n            quizgradeitems: [...document.querySelectorAll(SELECTORS.gradeItemTr)].map((tr) => {\n                return {id: tr.dataset.quizGradeItemId};\n            })\n        }\n    });\n\n    callServicesAndReturnRenderingData(methodCalls)\n        .then(reRenderPage)\n        .then(() => {\n            pending.resolve();\n            document.querySelector(SELECTORS.addGradeItemButton).focus();\n        })\n        .catch(Notification.exception);\n};\n\n/**\n * Replace the container with a new version.\n */\nconst registerEventListeners = () => {\n    document.body.addEventListener('click', handleGradeItemClick);\n    document.body.addEventListener('keydown', handleGradeItemKeyDown);\n    document.body.addEventListener('keyup', handleGradeItemKeyUp);\n    document.body.addEventListener('focusout', handleGradeItemFocusOut);\n\n    document.body.addEventListener('click', handleButtonClick);\n\n    document.body.addEventListener('change', handleSlotGradeItemChanged);\n};\n\n/**\n * Entry point.\n */\nexport const init = () => {\n    registerEventListeners();\n};\n"],"names":["SELECTORS","id","modal","callServiceAndReturnRenderingData","methodCall","callServicesAndReturnRenderingData","methodCalls","push","methodname","args","quizid","Promise","all","then","results","JSON","parse","at","handleSubmitModal","e","preventDefault","currentTarget","dataset","action","destroy","saveFeedback","updateStatusFooterButton","status","getBody","querySelectorAll","forEach","inputEl","disabled","async","formData","collectFormData","gradeItemId","parseInt","options","formdata","stringify","gradeitemid","result","errors","displayErrors","length","gradeItemRow","document","querySelector","addOverallFeedbackMenu","key","title","titleLevelFeedback","getIconFeedback","total","icon","Templates","renderPix","innerHTML","innerText","exception","totalFeedback","body","feedbackTextIndex","el","_el$querySelector","_el$querySelector$dat","fieldtype","inputBoundary","errorText","name","feedback","closest","classList","add","setAttribute","remove","removeAttribute","feedbackEl","items","itemData","type","_el$querySelector2","_el$querySelector2$da","boundary","value","itemid","format","text","handleAddMoreFeedback","modalBody","contextId","target","after","numberOfEditors","divider","loadFragment","no","done","html","js","insertAdjacentHTML","runTemplateJS","recalculateFeedbackIndex","gradeBoundaryEls","dividerButtonEls","wrapItem","label","afterindex","string","catch","eventAttached","addEventListener","handleGradeItemDelete","pending","Pending","tableCell","tableRow","quizId","quizGradeItemId","nextItemToFocus","nextElementSibling","quizgradeitems","deleteGradeItem","reRenderPage","resolve","focus","Notification","stopEditingGadeItem","editableSpan","oldContent","handleGradeItemKeyDown","keyCode","newName","updateGradeItem","editGradingPageData","render","replaceNode","handleGradeItemKeyUp","handleGradeItemFocusOut","MoodleConfig","behatsiterunning","handleSlotGradeItemChanged","select","slotId","newGradeItemId","slots","quizgradeitemid","updateSlotGradeItem","handleGradeItemClick","link","actionDelete","actionEdit","instructions","uniqueId","editLabel","rawName","inputElement","handleGradeItemEditStart","actionAddFeedback","Number","contextid","Modal","create","show","removeOnClose","large","templateContext","classes","setBody","setTimeout","addFeedback","input","handleGradeItemAddFeedback","handleButtonClick","handleAddGradeItemClick","handleAutoSetup","handleResetAllClick","parentNode","createGradeItem","autoSetupGradeItems","button","deleteCancelPromise","reallyResetAll","slotResets","map","tr"],"mappings":"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"}
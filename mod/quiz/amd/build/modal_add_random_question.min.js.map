{"version":3,"file":"modal_add_random_question.min.js","sources":["../src/modal_add_random_question.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Contain the logic for the add random question modal.\r\n *\r\n * @module     mod_quiz/modal_add_random_question\r\n * @copyright  2018 Ryan Wyllie <ryan@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport Modal from './add_question_modal';\r\nimport * as Notification from 'core/notification';\r\nimport * as Fragment from 'core/fragment';\r\nimport * as Templates from 'core/templates';\r\nimport * as FormChangeChecker from 'core_form/changechecker';\r\nimport {call as fetchMany} from 'core/ajax';\r\nimport Pending from 'core/pending';\r\n\r\nconst SELECTORS = {\r\n    EXISTING_CATEGORY_CONTAINER: '[data-region=\"existing-category-container\"]',\r\n    EXISTING_CATEGORY_TAB: '#id_existingcategoryheader',\r\n    NEW_CATEGORY_CONTAINER: '[data-region=\"new-category-container\"]',\r\n    NEW_CATEGORY_TAB: '#id_newcategoryheader',\r\n    TAB_CONTENT: '[data-region=\"tab-content\"]',\r\n    ADD_ON_PAGE_FORM_ELEMENT: '[name=\"addonpage\"]',\r\n    ADD_RANDOM_BUTTON: 'input[type=\"submit\"][name=\"addrandom\"]',\r\n    ADD_NEW_CATEGORY_BUTTON: 'input[type=\"submit\"][name=\"newcategory\"]',\r\n    SUBMIT_BUTTON_ELEMENT: 'input[type=\"submit\"][name=\"addrandom\"], input[type=\"submit\"][name=\"newcategory\"]',\r\n    FORM_HEADER: 'legend',\r\n    SELECT_NUMBER_TO_ADD: '#menurandomcount',\r\n    NEW_CATEGORY_ELEMENT: '#categoryname',\r\n    PARENT_CATEGORY_ELEMENT: '#parentcategory',\r\n    FILTER_CONDITION_ELEMENT: '[data-filtercondition]',\r\n    FORM_ELEMENT: '#add_random_question_form',\r\n    MESSAGE_INPUT: '[name=\"message\"]',\r\n};\r\n\r\nexport default class ModalAddRandomQuestion extends Modal {\r\n    static TYPE = 'mod_quiz-quiz-add-random-question';\r\n    static TEMPLATE = 'mod_quiz/modal_add_random_question';\r\n\r\n    /**\r\n     * Create the add random question modal.\r\n     *\r\n     * @param  {Number} contextId Current context id.\r\n     * @param  {string} category Category id and category context id comma separated.\r\n     * @param  {string} returnUrl URL to return to after form submission.\r\n     * @param  {Number} cmid Current course module id.\r\n     * @param  {boolean} showNewCategory Display the New category tab when selecting random questions.\r\n     */\r\n    static init(contextId, category, returnUrl, cmid, showNewCategory = true) {\r\n        const selector = '.menu [data-action=\"addarandomquestion\"]';\r\n        document.addEventListener('click', (e) => {\r\n            const trigger = e.target.closest(selector);\r\n            if (!trigger) {\r\n                return;\r\n            }\r\n            e.preventDefault();\r\n\r\n            ModalAddRandomQuestion.create({\r\n                contextId,\r\n                category,\r\n                returnUrl,\r\n                cmid,\r\n\r\n                title: trigger.dataset.header,\r\n                addOnPage: trigger.dataset.addonpage,\r\n\r\n                templateContext: {\r\n                    hidden: showNewCategory,\r\n                },\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Constructor for the Modal.\r\n     *\r\n     * @param {object} root The root jQuery element for the modal\r\n     */\r\n    constructor(root) {\r\n        super(root);\r\n        this.category = null;\r\n        this.returnUrl = null;\r\n        this.cmid = null;\r\n        this.loadedForm = false;\r\n    }\r\n\r\n    configure(modalConfig) {\r\n        this.setCategory(modalConfig.category);\r\n        this.setReturnUrl(modalConfig.returnUrl);\r\n        this.setCMID(modalConfig.cmid);\r\n\r\n        super.configure(modalConfig);\r\n    }\r\n\r\n    /**\r\n     * Set the id of the page that the question should be added to\r\n     * when the user clicks the add to quiz link.\r\n     *\r\n     * @method setAddOnPageId\r\n     * @param {int} id\r\n     */\r\n    setAddOnPageId(id) {\r\n        super.setAddOnPageId(id);\r\n        this.getBody().find(SELECTORS.ADD_ON_PAGE_FORM_ELEMENT).val(id);\r\n    }\r\n\r\n    /**\r\n     * Set the category for this form. The category is a comma separated\r\n     * category id and category context id.\r\n     *\r\n     * @method setCategory\r\n     * @param {string} category\r\n     */\r\n    setCategory(category) {\r\n        this.category = category;\r\n    }\r\n\r\n    /**\r\n     * Returns the saved category.\r\n     *\r\n     * @method getCategory\r\n     * @return {string}\r\n     */\r\n    getCategory() {\r\n        return this.category;\r\n    }\r\n\r\n    /**\r\n     * Set the return URL for the form.\r\n     *\r\n     * @method setReturnUrl\r\n     * @param {string} url\r\n     */\r\n    setReturnUrl(url) {\r\n        this.returnUrl = url;\r\n    }\r\n\r\n    /**\r\n     * Returns the return URL for the form.\r\n     *\r\n     * @method getReturnUrl\r\n     * @return {string}\r\n     */\r\n    getReturnUrl() {\r\n        return this.returnUrl;\r\n    }\r\n\r\n    /**\r\n     * Set the course module id for the form.\r\n     *\r\n     * @method setCMID\r\n     * @param {Number} id\r\n     */\r\n    setCMID(id) {\r\n        this.cmid = id;\r\n    }\r\n\r\n    /**\r\n     * Returns the course module id for the form.\r\n     *\r\n     * @method getCMID\r\n     * @return {Number}\r\n     */\r\n    getCMID() {\r\n        return this.cmid;\r\n    }\r\n\r\n    /**\r\n     * Moves a given form element inside (a child of) a given tab element.\r\n     *\r\n     * Hides the 'legend' (e.g. header) element of the form element because the\r\n     * tab has the name.\r\n     *\r\n     * Moves the submit button into a footer element at the bottom of the form\r\n     * element for styling purposes.\r\n     *\r\n     * @method moveContentIntoTab\r\n     * @param  {jquery} tabContent The form element to move into the tab.\r\n     * @param  {jquey} tabElement The tab element for the form element to move into.\r\n     */\r\n    moveContentIntoTab(tabContent, tabElement) {\r\n        // Hide the header because the tabs show us which part of the form we're\r\n        // looking at.\r\n        tabContent.find(SELECTORS.FORM_HEADER).addClass('hidden');\r\n        // Move the element inside a tab.\r\n        tabContent.wrap(tabElement);\r\n    }\r\n\r\n    /**\r\n     * Empty the tab content container and move all tabs from the form into the\r\n     * tab container element.\r\n     *\r\n     * @method moveTabsIntoTabContent\r\n     * @param  {jquery} form The form element.\r\n     */\r\n    moveTabsIntoTabContent(form) {\r\n        // Empty it to remove the loading icon.\r\n        const tabContent = this.getBody().find(SELECTORS.TAB_CONTENT).empty();\r\n        // Make sure all tabs are inside the tab content element.\r\n        form.find('[role=\"tabpanel\"]').wrapAll(tabContent);\r\n    }\r\n\r\n    /**\r\n     * Make sure all of the tabs have a cancel button in their fotter to sit along\r\n     * side the submit button.\r\n     *\r\n     * @method moveCancelButtonToTabs\r\n     * @param  {jquey} form The form element.\r\n     */\r\n    moveCancelButtonToTabs(form) {\r\n        const cancelButton = form.find(SELECTORS.CANCEL_BUTTON_ELEMENT).addClass('ml-1');\r\n        const tabFooters = form.find('[data-region=\"footer\"]');\r\n        // Remove the buttons container element.\r\n        cancelButton.closest(SELECTORS.BUTTON_CONTAINER).remove();\r\n        cancelButton.clone().appendTo(tabFooters);\r\n    }\r\n\r\n    /**\r\n     * Load the add random question form in a fragement and perform some transformation\r\n     * on the HTML to convert it into tabs for rendering in the modal.\r\n     *\r\n     * @method loadForm\r\n     * @return {promise} Resolved with form HTML and JS.\r\n     */\r\n    loadForm() {\r\n        const cmid = this.getCMID();\r\n        const cat = this.getCategory();\r\n        const addonpage = this.getAddOnPageId();\r\n        const returnurl = this.getReturnUrl();\r\n\r\n        return Fragment.loadFragment(\r\n            'mod_quiz',\r\n            'add_random_question_form',\r\n            this.getContextId(),\r\n            {\r\n                addonpage,\r\n                cat,\r\n                returnurl,\r\n                cmid,\r\n            }\r\n        )\r\n        .then((html, js) =>{\r\n            const form = $(html);\r\n            const existingCategoryTabContent = form.find(SELECTORS.EXISTING_CATEGORY_TAB);\r\n            const existingCategoryTab = this.getBody().find(SELECTORS.EXISTING_CATEGORY_CONTAINER);\r\n            const newCategoryTabContent = form.find(SELECTORS.NEW_CATEGORY_TAB);\r\n            const newCategoryTab = this.getBody().find(SELECTORS.NEW_CATEGORY_CONTAINER);\r\n\r\n            // Transform the form into tabs for better rendering in the modal.\r\n            this.moveContentIntoTab(existingCategoryTabContent, existingCategoryTab);\r\n            this.moveContentIntoTab(newCategoryTabContent, newCategoryTab);\r\n            this.moveTabsIntoTabContent(form);\r\n\r\n            Templates.replaceNode(this.getBody().find(SELECTORS.TAB_CONTENT), form, js);\r\n            return;\r\n        })\r\n        .then(() => {\r\n            // Make sure the form change checker is disabled otherwise it'll stop the user from navigating away from the\r\n            // page once the modal is hidden.\r\n            FormChangeChecker.disableAllChecks();\r\n\r\n            // Add question to quiz.\r\n            this.getBody()[0].addEventListener('click', (e) => {\r\n                const button = e.target.closest(SELECTORS.SUBMIT_BUTTON_ELEMENT);\r\n                if (!button) {\r\n                    return;\r\n                }\r\n                e.preventDefault();\r\n\r\n                // Add Random questions if the add random button was clicked.\r\n                const addRandomButton = e.target.closest(SELECTORS.ADD_RANDOM_BUTTON);\r\n                if (addRandomButton) {\r\n                    const randomcount = document.querySelector(SELECTORS.SELECT_NUMBER_TO_ADD).value;\r\n                    const filtercondition = document.querySelector(SELECTORS.FILTER_CONDITION_ELEMENT).dataset?.filtercondition;\r\n\r\n                    this.addQuestions(cmid, addonpage, randomcount, filtercondition, '', '');\r\n                    return;\r\n                }\r\n                // Add new category if the add category button was clicked.\r\n                const addCategoryButton = e.target.closest(SELECTORS.ADD_NEW_CATEGORY_BUTTON);\r\n                if (addCategoryButton) {\r\n                    this.addQuestions(\r\n                        cmid,\r\n                        addonpage,\r\n                        1,\r\n                        '',\r\n                        document.querySelector(SELECTORS.NEW_CATEGORY_ELEMENT).value,\r\n                        document.querySelector(SELECTORS.PARENT_CATEGORY_ELEMENT).value\r\n                    );\r\n                    return;\r\n                }\r\n            });\r\n        })\r\n        .catch(Notification.exception);\r\n    }\r\n\r\n    /**\r\n     * Call web service function to add random questions\r\n     *\r\n     * @param {number} cmid course module id\r\n     * @param {number} addonpage the page where random questions will be added to\r\n     * @param {number} randomcount Number of random questions\r\n     * @param {string} filtercondition Filter condition\r\n     * @param {string} newcategory add new category\r\n     * @param {string} parentcategory parent category of new category\r\n     */\r\n    async addQuestions(\r\n        cmid,\r\n        addonpage,\r\n        randomcount,\r\n        filtercondition,\r\n        newcategory,\r\n        parentcategory\r\n    ) {\r\n        // We do not need to resolve this Pending because the form submission will result in a page redirect.\r\n        new Pending('mod-quiz/modal_add_random_questions');\r\n        const call = {\r\n            methodname: 'mod_quiz_add_random_questions',\r\n            args: {\r\n                cmid,\r\n                addonpage,\r\n                randomcount,\r\n                filtercondition,\r\n                newcategory,\r\n                parentcategory,\r\n            }\r\n        };\r\n        try {\r\n            const response = await fetchMany([call])[0];\r\n            const form = document.querySelector(SELECTORS.FORM_ELEMENT);\r\n            const messageInput = form.querySelector(SELECTORS.MESSAGE_INPUT);\r\n            messageInput.value = response.message;\r\n            form.submit();\r\n        } catch (e) {\r\n            Notification.exception(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Override the modal show function to load the form when this modal is first\r\n     * shown.\r\n     *\r\n     * @method show\r\n     */\r\n    show() {\r\n        super.show(this);\r\n\r\n        if (!this.loadedForm) {\r\n            this.loadForm(window.location.search);\r\n            this.loadedForm = true;\r\n        }\r\n    }\r\n}\r\n\r\nModalAddRandomQuestion.registerModalType();\r\n"],"names":["SELECTORS","EXISTING_CATEGORY_CONTAINER","EXISTING_CATEGORY_TAB","NEW_CATEGORY_CONTAINER","NEW_CATEGORY_TAB","TAB_CONTENT","ADD_ON_PAGE_FORM_ELEMENT","ADD_RANDOM_BUTTON","ADD_NEW_CATEGORY_BUTTON","SUBMIT_BUTTON_ELEMENT","FORM_HEADER","SELECT_NUMBER_TO_ADD","NEW_CATEGORY_ELEMENT","PARENT_CATEGORY_ELEMENT","FILTER_CONDITION_ELEMENT","FORM_ELEMENT","MESSAGE_INPUT","ModalAddRandomQuestion","Modal","contextId","category","returnUrl","cmid","showNewCategory","document","addEventListener","e","trigger","target","closest","preventDefault","create","title","dataset","header","addOnPage","addonpage","templateContext","hidden","constructor","root","loadedForm","configure","modalConfig","setCategory","setReturnUrl","setCMID","setAddOnPageId","id","getBody","find","val","getCategory","this","url","getReturnUrl","getCMID","moveContentIntoTab","tabContent","tabElement","addClass","wrap","moveTabsIntoTabContent","form","empty","wrapAll","moveCancelButtonToTabs","cancelButton","CANCEL_BUTTON_ELEMENT","tabFooters","BUTTON_CONTAINER","remove","clone","appendTo","loadForm","cat","getAddOnPageId","returnurl","Fragment","loadFragment","getContextId","then","html","js","existingCategoryTabContent","existingCategoryTab","newCategoryTabContent","newCategoryTab","Templates","replaceNode","FormChangeChecker","disableAllChecks","randomcount","querySelector","value","filtercondition","_document$querySelect","addQuestions","catch","Notification","exception","newcategory","parentcategory","Pending","call","methodname","args","response","message","submit","show","window","location","search","registerModalType"],"mappings":"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"}
{"version":3,"file":"quiz_toolboxes.min.js","sources":["../src/quiz_toolboxes.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Render the question slot template for each question in the quiz edit view.\n *\n * @module     mod_quiz/quiz_toolboxes\n * @copyright  2024 The Open University.\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {call as fetchMany} from 'core/ajax';\nimport {getString, getStrings} from 'core/str';\nimport {slot, util, page} from 'mod_quiz/quiz_utils';\nimport Notification from 'core/notification';\nimport Pending from 'core/pending';\n\n// The CSS classes we use.\nconst CSS = {\n        ACTIVITYINSTANCE: 'activityinstance',\n        AVAILABILITYINFODIV: 'div.availabilityinfo',\n        CONTENTWITHOUTLINK: 'contentwithoutlink',\n        CONDITIONALHIDDEN: 'conditionalhidden',\n        DIMCLASS: 'dimmed',\n        DIMMEDTEXT: 'dimmed_text',\n        EDITINSTRUCTIONS: 'editinstructions',\n        EDITINGMAXMARK: 'editor_displayed',\n        HIDE: 'hide',\n        JOIN: 'page_join',\n        MODINDENTCOUNT: 'mod-indent-',\n        MODINDENTHUGE: 'mod-indent-huge',\n        PAGE: 'page',\n        SECTIONHIDDENCLASS: 'hidden',\n        SECTIONIDPREFIX: 'section-',\n        SELECTMULTIPLE: 'select-multiple',\n        SLOT: 'slot',\n        SHOW: 'editing_show',\n        TITLEEDITOR: 'titleeditor'\n    },\n    // The CSS selectors we use.\n    SELECTOR = {\n        ACTIONAREA: '.actions',\n        ACTIONLINKTEXT: '.actionlinktext',\n        ACTIVITYACTION: 'a.cm-edit-action[data-action], a.editing_maxmark, a.editing_section, input.shuffle_questions',\n        ACTIVITYFORM: 'span.instancemaxmarkcontainer form',\n        ACTIVITYINSTANCE: '.' + CSS.ACTIVITYINSTANCE,\n        SECTIONINSTANCE: '.sectioninstance',\n        ACTIVITYLI: 'li.activity, li.section',\n        ACTIVITYMAXMARK: 'input[name=maxmark]',\n        COMMANDSPAN: '.commands',\n        CONFIGTOOLBOX: '.config-toolbox',\n        CONTENTAFTERLINK: 'div.contentafterlink',\n        CONTENTWITHOUTLINK: 'div.contentwithoutlink',\n        DELETESECTIONICON: 'a.editing_delete .icon',\n        EDITMAXMARK: 'a.editing_maxmark',\n        EDITSECTION: 'a.editing_section',\n        EDITSECTIONICON: 'a.editing_section .icon',\n        EDITSHUFFLEQUESTIONSACTION: 'input.cm-edit-action[data-action]',\n        EDITSHUFFLEAREA: '.instanceshufflequestions .shuffle-progress',\n        HIDE: 'a.editing_hide',\n        HIGHLIGHT: 'a.editing_highlight',\n        INSTANCENAME: 'span.instancename',\n        INSTANCEMAXMARK: 'span.instancemaxmark',\n        INSTANCESECTION: 'span.instancesection',\n        INSTANCESECTIONAREA: 'div.section-heading',\n        MAXMARKCONTAINER: '.instancemaxmarkcontainer',\n        MODINDENTDIV: '.mod-indent',\n        MODINDENTOUTER: '.mod-indent-outer',\n        NUMQUESTIONS: '.numberofquestions',\n        PAGECONTENT: 'div#page-content',\n        PAGELI: 'li.page',\n        SECTIONLI: 'li.section',\n        SECTIONUL: 'ul.section',\n        SECTIONFORM: '.instancesectioncontainer form',\n        SECTIONINPUT: 'input[name=section]',\n        SELECTMULTIPLEBUTTON: '#selectmultiplecommand',\n        SELECTMULTIPLECANCELBUTTON: '#selectmultiplecancelcommand',\n        SELECTMULTIPLECHECKBOX: '.select-multiple-checkbox',\n        SELECTMULTIPLEDELETEBUTTON: '#selectmultipledeletecommand',\n        SELECTALL: '#questionselectall',\n        SHOW: 'a.' + CSS.SHOW,\n        SLOTLI: 'li.slot',\n        SUMMARKS: '.mod_quiz_summarks'\n    },\n    BODY = document.body;\nclass ResourceToolBox extends ToolBox {\n    courseId = 0;\n    quizId = 0;\n    ajaxURL = null;\n    config = {};\n\n    /**\n     * An Array of events added when editing a max mark field.\n     * These should all be detached when editing is complete.\n     *\n     * @property editMaxMarkEvents\n     * @protected\n     * @type Array\n     * @protected\n     */\n    editMaxMarkEvents = [];\n\n    constructor(courseId, quizId, ajaxURL) {\n        const config = JSON.parse(document.querySelector(SELECTOR.CONFIGTOOLBOX).dataset.config);\n        super(config, courseId, quizId);\n        this.courseId = courseId;\n        this.quizId = quizId;\n        this.ajaxURL = ajaxURL;\n        this.config = config;\n        // This.config = config;\n        // M.mod_quiz.quizbase.register_module(this);\n        BODY.addEventListener('click', (event) => {\n            // Use event.target.closest to ensure event delegation works\n            if (event.target.closest(SELECTOR.ACTIVITYACTION) ||\n                    event.target.closest(SELECTOR.DEPENDENCY_LINK)) {\n                this.handleDataAction(event);\n            }\n        });\n\n        this.initialiseSelectMultiple();\n    }\n\n    /**\n     * Initialize the select multiple options\n     * Add actions to the buttons that enable multiple slots to be selected and managed at once.\n     *\n     * @method initialiseSelectMultiple\n     * @protected\n     */\n    initialiseSelectMultiple() {\n        const body = document.body;\n\n        // Click select multiple button to show the select all options.\n        document.querySelector(SELECTOR.SELECTMULTIPLEBUTTON).addEventListener('click', function(e) {\n            e.preventDefault();\n            body.classList.add(CSS.SELECTMULTIPLE);\n        });\n\n        // Click cancel button to hide the select all options.\n        document.querySelector(SELECTOR.SELECTMULTIPLECANCELBUTTON).addEventListener('click', function(e) {\n            e.preventDefault();\n            body.classList.remove(CSS.SELECTMULTIPLE);\n        });\n\n        // Assign the delete method to the delete multiple button.\n        body.addEventListener('click', function(e) {\n            if (e.target.closest(SELECTOR.SELECTMULTIPLEDELETEBUTTON)) {\n                this.deleteMultipleAction(e);\n            }\n        }.bind(this));\n\n        // Assign the delete method to the delete multiple button.\n        Y.delegate('click', this.delete_multiple_action, BODY, SELECTOR.SELECTMULTIPLEDELETEBUTTON, this);\n    }\n\n    /**\n     * Handles the delegation event. When this is fired someone has triggered an action.\n     *\n     * Note not all actions will result in an AJAX enhancement.\n     *\n     * @protected\n     * @method handleDataAction\n     * @param {Event} ev The event that was triggered.\n     * @returns {boolean}\n     */\n    handleDataAction(ev) {\n        // We need to get the anchor element that triggered this event.\n        let node = ev.target;\n        if (!(this.isATag(node))) {\n            node = node.closest(SELECTOR.ACTIVITYACTION);\n        }\n\n        // From the anchor we can get both the activity (added during initialisation) and the action being\n        // performed (added by the UI as a data attribute).\n        const action = node.dataset.action,\n            activity = node.closest(SELECTOR.ACTIVITYLI);\n\n        if (!(this.isATag(node)) || !action || !activity) {\n            // It wasn't a valid action node.\n            return;\n        }\n\n        // Switch based upon the action and do the desired thing.\n        switch (action) {\n            case 'editmaxmark':\n                // The user wishes to edit the max mark of the resource.\n                this.editMaxMark(ev, node, activity);\n                break;\n            case 'delete':\n                // The user is deleting the activity.\n                this.deleteWithConfirmation(ev, node, activity, action);\n                break;\n            case 'addpagebreak':\n            case 'removepagebreak':\n                // The user is adding or removing a page break.\n                this.updatePageBreak(ev, node, activity, action);\n                break;\n            case 'adddependency':\n            case 'removedependency':\n                // The user is adding or removing a dependency between questions.\n                this.updateDependency(ev, node, activity, action);\n                break;\n            default:\n                // Nothing to do here!\n                break;\n        }\n    }\n\n    isATag(node) {\n        return node.tagName.toLowerCase() === 'a';\n    }\n\n    /**\n     * Edit the max mark for the resource.\n     *\n     * @protected\n     * @method editMaxMark\n     * @param {Event} ev The event that was fired.\n     * @param {Element} button The button that triggered this action.\n     * @param {Element} activity The activity node that this action will be performed on.\n     * @return Boolean\n     */\n    editMaxMark(ev, button, activity) {\n        // Get the element we're working on.\n        const instanceMaxmark = activity.querySelector(SELECTOR.INSTANCEMAXMARK),\n            instance = activity.querySelector(SELECTOR.ACTIVITYINSTANCE),\n            anchor = instanceMaxmark, // Grab the anchor so that we can swap it with the edit form.\n            oldMaxMark = instanceMaxmark.firstChild.nodeValue,\n            data = {\n                'id': slot.getId(activity),\n                'quizid': this.quizId,\n            };\n        let maxMarkText = oldMaxMark;\n\n        // Prevent the default actions.\n        ev.preventDefault();\n        const pending = new Pending('get-max-mark');\n        this.sendRequest(data, null, 'mod_quiz_get_max_mark')\n            .then(response => {\n                if (M.core.actionmenu && M.core.actionmenu.instance) {\n                    M.core.actionmenu.instance.hideMenu(ev);\n                }\n                // Try to retrieve the existing string from the server.\n                if (response.instancemaxmark) {\n                    maxMarkText = response.instancemaxmark;\n                }\n\n                // Create the editor and submit button.\n                const editForm = util.createElement(\"form\", {action: '#'});\n\n                const editInstructions = util.createElement('span', {\n                    id: 'id_editinstructions',\n                    \"class\": CSS.EDITINSTRUCTIONS,\n                });\n\n                editInstructions.innerHTML = M.util.get_string('edittitleinstructions', 'moodle');\n\n                const editor = util.createElement('input', {\n                    type: 'text',\n                    name: 'maxmark',\n                    \"class\": CSS.TITLEEDITOR,\n                    value: maxMarkText,\n                    autocomplete: 'off',\n                    ['aria-describedby']: 'id_editinstructions',\n                    maxLength: 12,\n                    size: parseInt(this.config.questiondecimalpoints, 10) + 2,\n                });\n\n\n                // Clear the existing content and put the editor in.\n                editForm.appendChild(editor);\n                editForm.dataset.anchor = anchor.outerHTML;\n                instance.parentNode.insertBefore(editInstructions, instance);\n                // Replace anchor span with the editForm input to edit.\n                activity.querySelector(SELECTOR.MAXMARKCONTAINER).replaceChild(editForm, anchor);\n\n                // We hide various components whilst editing:\n                activity.classList.add(CSS.EDITINGMAXMARK);\n\n                // Focus and select the editor text.\n                editor.focus();\n                editor.select();\n\n                // Cancel the edit if we lose focus or the escape key is pressed.\n                editor.addEventListener('blur', event => this.handleMaxMarkEditorBlur\n                    .call(this, event, activity, false));\n                editor.addEventListener('keydown', event => this.handleMaxMarkEditorType\n                    .call(this, event, activity, true));\n                // Handle form submission.\n                editForm.addEventListener('submit', event => this.handleMaxMarkFormSubmit\n                    .call(this, event, activity, oldMaxMark));\n\n                // Store the event listeners for later removal\n                this.editMaxMarkEvents = [\n                    {type: 'blur', handler: this.handleMaxMarkEditorBlur, element:  editor, selector: SELECTOR.SELECTMULTIPLECHECKBOX},\n                    {type: 'keydown', handler: this.handleMaxMarkEditorType, element: editor, selector: SELECTOR.SELECTMULTIPLECHECKBOX},\n                    {type: 'submit', handler: this.handleMaxMarkFormSubmit, element: editForm, selector: 'form'},\n                ];\n            })\n            .catch(Notification.exception);\n    }\n\n    /**\n     * Takes care of what needs to happen when the user clicks on the delete multiple button.\n     *\n     * @protected\n     * @method deleteMultipleAction\n     * @param {Event} ev The event that was fired.\n     */\n    deleteMultipleAction(ev) {\n        const problemSection = this.findSectionsThatWouldBecomeEmpty();\n\n        if (typeof problemSection !== 'undefined') {\n            getStrings([\n                {key: 'cannotremoveslots', component: 'quiz'},\n                {key: 'cannotremoveallsectionslots', component: 'quiz', param: problemSection},\n            ]).then(([string1, string2]) => {\n                Notification.alert(\n                    string1,\n                    string2,\n                );\n                return true;\n            }).catch(Notification.exception);\n        } else {\n            this.deleteMultipleWithConfirmation(ev);\n        }\n    }\n\n    /**\n     * Finds the section that would become empty if we remove the selected slots.\n     *\n     * @protected\n     * @method findSectionsThatWouldBecomeEmpty\n     * @returns {String} The name of the first section found\n     */\n    findSectionsThatWouldBecomeEmpty() {\n        let section;\n        const sectionNodes = [...document.querySelectorAll(SELECTOR.SECTIONLI)];\n\n        if (sectionNodes.length > 1) {\n            sectionNodes.some((node) => {\n                const sectionName = node.querySelector(SELECTOR.INSTANCESECTION).textContent;\n                const checked = node.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:checked`);\n                const unchecked = node.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:not(:checked)`);\n                if (checked.length > 0 && unchecked.length === 0) {\n                    section = sectionName;\n                }\n\n                return section;\n            });\n        }\n\n        return section;\n    }\n\n    /**\n     * Deletes the given activities or resources after confirmation.\n     *\n     * @protected\n     * @method deleteMultipleWithConfirmation\n     * @param {Event} ev The event that was fired.\n     */\n    async deleteMultipleWithConfirmation(ev) {\n        ev.preventDefault();\n\n        let ids = '';\n        const slots = [];\n        document.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:checked`).forEach((node) => {\n            const slotData = slot.getSlotFromComponent(node);\n            ids += ids === '' ? '' : ',';\n            ids += slot.getId(slotData);\n            slots.push(slotData);\n        });\n        const element = document.querySelector('div.mod-quiz-edit-content');\n\n        // Do nothing if no slots are selected.\n        if (!slots.length) {\n            return;\n        }\n\n        const [title, question, saveLabel] = await getStrings([\n            {key: 'confirm', component: 'moodle'},\n            {key: 'areyousureremoveselected', component: 'moodle'},\n            {key: 'yes', component: 'moodle'},\n        ]);\n\n        Notification.saveCancelPromise(\n            title,\n            question,\n            saveLabel,\n        ).then(() => {\n            const spinner = this.addSpinner(element);\n            const data = {\n                ids: ids,\n                quizid: this.quizId,\n            };\n            // Delete items on server.\n            this.sendRequest(data, spinner, 'mod_quiz_delete_multiple').then(response => {\n                // Delete locally if deleted on server.\n                if (response.deleted) {\n                    // Actually remove the element.\n                    document.querySelectorAll(`${SELECTOR.SELECTMULTIPLECHECKBOX}:checked`).forEach((node) => {\n                        slot.remove(node.closest('li.activity'));\n                    });\n                    // Update the page numbers and sections.\n                    this.reorganiseEditPage();\n\n                    // Remove the select multiple options.\n                    document.body.classList.remove(CSS.SELECTMULTIPLE);\n                }\n\n                // Run the callback if we have one.\n                if (response.newsummarks) {\n                    document.querySelector(SELECTOR.SUMMARKS).innerHTML = response.newsummarks;\n                }\n                if (response.newnumquestions) {\n                    getString('numquestionsx', 'quiz', response.newnumquestions).then(string => {\n                        document.querySelector(SELECTOR.NUMQUESTIONS).innerHTML = string;\n                    });\n                }\n            });\n        }).catch(() => {\n            // User cancelled.\n        });\n    }\n\n    handleMaxMarkEditorBlur(event, activity, preventDefault) {\n        return this.editMaxMarkCancel(event, activity, preventDefault);\n    }\n\n    handleMaxMarkEditorType(event, activity, preventDefault) {\n        if (event.key === 'Escape' || event.keyCode === 27) {\n            this.editMaxMarkCancel(event, activity, preventDefault);\n        }\n    }\n\n    handleMaxMarkFormSubmit(event, activity, oldMaxMark) {\n        event.preventDefault(); // Prevent the default form submission behavior\n        return this.editMaxMarkSubmit(event, activity, oldMaxMark);\n    }\n    /**\n     * Deletes the given activity or resource after confirmation.\n     *\n     * @protected\n     * @method deleteWithConfirmation\n     * @param {Event} ev The event that was fired.\n     * @param {Element} button The button that triggered this action.\n     * @param {Element} activity The activity node that this action will be performed on.\n     */\n    async deleteWithConfirmation(ev, button, activity) {\n        // Prevent the default button action.\n        ev.preventDefault();\n\n        // Get the element we're working on.\n        const element = activity;\n        const qtypeClass = element.getAttribute('class').match(/qtype_(\\S*)/)[1];\n\n        // Create confirm string (different if element has or does not have name)\n        const qtypeName = await getString('pluginname', 'qtype_' + qtypeClass);\n        const allStrings = [\n            {key: 'confirm', component: 'moodle'},\n            {key: 'confirmremovequestion', component: 'quiz', param: qtypeName},\n            {key: 'yes', component: 'moodle'},\n        ];\n        const [title, question, saveLabel] = await getStrings(allStrings);\n\n        await Notification.saveCancelPromise(\n            title,\n            question,\n            saveLabel,\n        );\n\n        const spinner = this.addSpinner(element);\n        const data = {\n            'quizid': this.quizId,\n            'id': slot.getId(element) // Adjusting the YUI namespace\n        };\n        this.sendRequest(data, spinner, 'mod_quiz_delete_resource').then(response => {\n            if (response.deleted) {\n                // Actually remove the element.\n                slot.remove(element);\n                this.reorganiseEditPage();\n                if (M.core.actionmenu && M.core.actionmenu.instance) {\n                    M.core.actionmenu.instance.hideMenu(ev);\n                }\n            }\n        });\n    }\n\n    /**\n     * Reorganise the UI after every edit action.\n     *\n     * @protected\n     * @method reorganise_edit_page\n     */\n    reorganiseEditPage() {\n        slot.reorderSlots();\n        slot.reorderPageBreaks();\n        page.reorderPages();\n        slot.updateOneSlotSections();\n        slot.updateAllDependencyIcons();\n    }\n\n    /**\n     * Joins or separates the given slot with the page of the previous slot. Reorders the pages of\n     * the other slots.\n     *\n     * @protected\n     * @param {Event} ev - The event that was fired.\n     * @param {HTMLElement} button - The button that triggered this action.\n     * @param {HTMLElement} activity - The activity node that this action will be performed on.\n     * @param {string} action - The action, addpagebreak or removepagebreak.\n     */\n    updatePageBreak(ev, button, activity, action) {\n        // Prevent the default button action\n        ev.preventDefault();\n\n        let nextActivity = activity.nextElementSibling;\n\n        while (nextActivity && !nextActivity.matches(SELECTOR.SLOTLI)) {\n            nextActivity = nextActivity.nextElementSibling;\n        }\n\n        if (!nextActivity) {\n            return;\n        }\n        const spinner = this.addSpinner(nextActivity);\n        const value = action === 'removepagebreak' ? 1 : 2;\n\n        const data = {\n            'id': slot.getId(nextActivity),\n            'value': value,\n            'quizid': this.quizId,\n        };\n\n        this.sendRequest(data, spinner, 'mod_quiz_update_page_break').then(response => {\n            if (response.slots) {\n                if (action === 'addpagebreak') {\n                    page.add(activity);\n                } else {\n                    const pageEl = activity.nextElementSibling\n                        && activity.nextElementSibling.matches(page.SELECTORS.PAGE) ? activity.nextElementSibling : null;\n                    if (pageEl) {\n                        page.remove(pageEl, true);\n                    }\n                }\n                this.reorganizeEditPage();\n            }\n            return true;\n        }).catch(Notification.exception);\n    }\n\n\n    updateDependency() {\n\n    }\n\n    /**\n     * Reorganise the UI after every edit action.\n     *\n     * @protected\n     * @method reorganise_edit_page\n     */\n    reorganizeEditPage() {\n        slot.reorderSlots();\n        slot.reorderPageBreaks();\n        page.reorderPages();\n        slot.updateOneSlotSections();\n        slot.updateAllDependencyIcons();\n    }\n\n    /**\n     * Handles the cancel event when editing the activity or resources maxmark.\n     *\n     * @protected\n     * @method editMaxMarkCancel\n     * @param {Event} ev The event that triggered this.\n     * @param {Node} activity The activity whose maxmark we are altering.\n     * @param {Boolean} preventDefault If true we should prevent the default action from occuring.\n     */\n    editMaxMarkCancel(ev, activity, preventDefault) {\n        if (preventDefault) {\n            ev.preventDefault();\n        }\n\n        this.editMaxMarkClear(activity);\n    }\n\n    /**\n     * Handles clearing the editing UI and returning things to the original state they were in.\n     *\n     * @protected\n     * @method editMaxMarkClear\n     * @param {Element} activity  The activity whose maxmark we were altering.\n     */\n    editMaxMarkClear(activity) {\n        // Detach all listen events to prevent duplicate triggers\n        if (this.editMaxMarkEvents.length === 0) {\n            return;\n        }\n        this.editMaxMarkEvents.forEach(event => {\n            // Activity.querySelector()\n            event.element.removeEventListener(event.type, event.handler);\n        });\n\n        this.editMaxMarkEvents = [];\n\n        const editForm = activity.querySelector(SELECTOR.ACTIVITYFORM),\n            instructions = activity.querySelector('#id_editinstructions');\n        if (editForm) {\n            editForm.parentNode.insertAdjacentHTML('afterbegin', editForm.dataset.anchor);\n            editForm.remove();\n        }\n        if (instructions) {\n            instructions.parentNode.removeChild(instructions);\n        }\n\n        // Remove the editing class again to revert the display.\n        activity.classList.remove(CSS.EDITINGMAXMARK);\n\n        // Refocus the link which was clicked originally so the user can continue using keyboard nav.\n        setTimeout(function() {\n            activity.querySelector(SELECTOR.EDITMAXMARK).focus();\n        }, 100);\n\n        // TODO MDL-50768 This hack is to keep Behat happy until they release a version of\n        // MinkSelenium2Driver that fixes\n        // https://github.com/Behat/MinkSelenium2Driver/issues/80.\n        if (!document.querySelector('input[name=maxmark]')) {\n            const input = util.createElement('input', {\n                type: 'text',\n                name: 'maxmark',\n                \"class\": 'd-none',\n            });\n            document.querySelector('body').appendChild(input);\n        }\n    }\n\n    /**\n     * Handles the submit event when editing the activity or resources maxmark.\n     *\n     * @protected\n     * @method editMaxMarkSubmit\n     * @param {Event} ev The event that triggered this.\n     * @param {Element} activity The activity whose max mark we are altering.\n     * @param {String} originalMaxMark The original max mark the activity or resource had.\n     */\n    editMaxMarkSubmit(ev, activity, originalMaxMark) {\n        // We don't actually want to submit anything.\n        ev.preventDefault();\n        const editor = activity.querySelector(SELECTOR.ACTIVITYFORM + ' ' + SELECTOR.ACTIVITYMAXMARK);\n        const newMaxMark = editor.value.trim();\n        const spinner = this.addSpinner(activity);\n        // Try to blur input to trigger event editMaxMarkClear.\n        editor.blur();\n        // Update the instance max mark content\n        activity.querySelector(SELECTOR.INSTANCEMAXMARK).textContent = newMaxMark;\n\n        if (newMaxMark !== null && newMaxMark !== \"\" && newMaxMark !== originalMaxMark) {\n            const data = {\n                'maxmark': newMaxMark,\n                'id': slot.getId(activity), // Adjusting the namespace.\n                'quizid': this.quizId,\n            };\n            this.sendRequest(data, spinner, 'mod_quiz_update_max_mark').then(response => {\n                spinner.classList.add('d-none');\n                if (response.instancemaxmark) {\n                    activity.querySelector(SELECTOR.INSTANCEMAXMARK).textContent = response.instancemaxmark;\n                }\n                if (response.newsummarks) {\n                    document.querySelector(SELECTOR.SUMMARKS).innerHTML = response.newsummarks;\n                }\n            }).catch(Notification.exception);\n        }\n    }\n\n    /**\n     * Add a loading icon to the specified activity.\n     *\n     * The icon is added within the action area.\n     *\n     * @method addSpinner\n     * @param {Element} activity The activity to add a loading icon to\n     * @return {Element|null} The newly created icon, or null if the action area was not found.\n     */\n    addSpinner(activity) {\n        const actionArea = activity.querySelector(SELECTOR.ACTIONAREA);\n        if (actionArea) {\n            return util.addSpinner(actionArea);\n        }\n        return null;\n    }\n}\n\nclass ToolBox {\n    config = {};\n    quizId = 0;\n    courseId = 0;\n\n    constructor(config, courseId, quizId) {\n        this.config = config;\n        this.courseId = courseId;\n        this.quizId = quizId;\n    }\n    /**\n     * Send a request using the REST API\n     *\n     * @method sendRequest\n     * @param {Object} data The data to submit with the AJAX request\n     * @param {Element} [statusSpinner] A statusSpinner which may contain a section loader\n     * @param {String} methodName The service name.\n     * @param {Object} [optionalConfig] Any additional configuration to submit\n     * @chainable\n     */\n    sendRequest(data, statusSpinner, methodName, optionalConfig) {\n        // Default data structure\n        // if (!data) {\n        //     data = {};\n        // }\n\n        // Handle any variables which we must pass back through to\n        // const pageParams = this.config.pageparams;\n        // for (let varName in pageParams) {\n        //     data[varName] = pageParams[varName];\n        // }\n\n        // data.sesskey = M.cfg.sesskey;\n        // data.courseid = this.courseId;\n        // data.quizid = this.quizId;\n\n        const parameters = {\n            methodname: methodName,\n            args: data,\n        };\n        // Var uri = M.cfg.wwwroot + this.get('ajaxurl');\n        //\n        // // Define the configuration to send with the request\n        // var responsetext = [];\n        // var config = {\n        //     method: 'POST',\n        //     data: data,\n        //     on: {\n        //         success: function(tid, response) {\n        //             try {\n        //                 responsetext = Y.JSON.parse(response.responseText);\n        //                 if (responsetext.error) {\n        //                     new M.core.ajaxException(responsetext);\n        //                 }\n        //             } catch (e) {\n        //                 // Ignore.\n        //             }\n        //\n        //             // Run the callback if we have one.\n        //             if (responsetext.hasOwnProperty('newsummarks')) {\n        //                 Y.one(SELECTOR.SUMMARKS).setHTML(responsetext.newsummarks);\n        //             }\n        //             if (responsetext.hasOwnProperty('newnumquestions')) {\n        //                 Y.one(SELECTOR.NUMQUESTIONS).setHTML(\n        //                     M.util.get_string('numquestionsx', 'quiz', responsetext.newnumquestions)\n        //                 );\n        //             }\n        //             if (successCallback) {\n        //                 Y.bind(successCallback, this, responsetext)();\n        //             }\n        //\n        //             if (statusSpinner) {\n        //                 window.setTimeout(function() {\n        //                     statusSpinner.hide();\n        //                 }, 400);\n        //             }\n        //         },\n        //         failure: function(tid, response) {\n        //             if (statusSpinner) {\n        //                 statusSpinner.hide();\n        //             }\n        //             new M.core.ajaxException(response);\n        //         }\n        //     },\n        //     context: this\n        // };\n\n        // Apply optional config\n        if (optionalConfig) {\n            for (let varName in optionalConfig) {\n                config[varName] = optionalConfig[varName];\n            }\n        }\n\n        if (statusSpinner) {\n            statusSpinner.classList.remove('d-none');\n        }\n\n        return fetchMany([parameters])[0];\n    }\n}\n\n/**\n * In a given group, set all the drags and drops to be the same size.\n *\n * @param {number} courseid\n * @param {number} quizid\n * @param {string} ajaxurl\n */\nfunction initResourceToolbox(courseid, quizid, ajaxurl) {\n    const toolBox = new ResourceToolBox(courseid, quizid, ajaxurl);\n}\n\nconst config = JSON.parse(document.querySelector(SELECTOR.CONFIGTOOLBOX).dataset.config);\n\nexport {\n    initResourceToolbox,\n    config,\n};"],"names":["courseid","quizid","ajaxurl","ResourceToolBox","CSS","SELECTOR","ACTIONAREA","ACTIONLINKTEXT","ACTIVITYACTION","ACTIVITYFORM","ACTIVITYINSTANCE","SECTIONINSTANCE","ACTIVITYLI","ACTIVITYMAXMARK","COMMANDSPAN","CONFIGTOOLBOX","CONTENTAFTERLINK","CONTENTWITHOUTLINK","DELETESECTIONICON","EDITMAXMARK","EDITSECTION","EDITSECTIONICON","EDITSHUFFLEQUESTIONSACTION","EDITSHUFFLEAREA","HIDE","HIGHLIGHT","INSTANCENAME","INSTANCEMAXMARK","INSTANCESECTION","INSTANCESECTIONAREA","MAXMARKCONTAINER","MODINDENTDIV","MODINDENTOUTER","NUMQUESTIONS","PAGECONTENT","PAGELI","SECTIONLI","SECTIONUL","SECTIONFORM","SECTIONINPUT","SELECTMULTIPLEBUTTON","SELECTMULTIPLECANCELBUTTON","SELECTMULTIPLECHECKBOX","SELECTMULTIPLEDELETEBUTTON","SELECTALL","SHOW","SLOTLI","SUMMARKS","BODY","document","body","constructor","config","courseId","quizId","sendRequest","data","statusSpinner","methodName","optionalConfig","parameters","methodname","args","varName","classList","remove","ajaxURL","JSON","parse","querySelector","dataset","addEventListener","event","target","closest","DEPENDENCY_LINK","handleDataAction","initialiseSelectMultiple","e","preventDefault","add","deleteMultipleAction","bind","this","Y","delegate","delete_multiple_action","ev","node","isATag","action","activity","editMaxMark","deleteWithConfirmation","updatePageBreak","updateDependency","tagName","toLowerCase","button","instanceMaxmark","instance","anchor","oldMaxMark","firstChild","nodeValue","slot","getId","maxMarkText","Pending","then","response","M","core","actionmenu","hideMenu","instancemaxmark","editForm","util","createElement","editInstructions","id","innerHTML","get_string","editor","type","name","value","autocomplete","maxLength","size","parseInt","questiondecimalpoints","appendChild","outerHTML","parentNode","insertBefore","replaceChild","focus","select","handleMaxMarkEditorBlur","call","handleMaxMarkEditorType","handleMaxMarkFormSubmit","editMaxMarkEvents","handler","element","selector","catch","Notification","exception","problemSection","findSectionsThatWouldBecomeEmpty","key","component","param","_ref","string1","string2","alert","deleteMultipleWithConfirmation","section","sectionNodes","querySelectorAll","length","some","sectionName","textContent","checked","unchecked","ids","slots","forEach","slotData","getSlotFromComponent","push","title","question","saveLabel","saveCancelPromise","spinner","addSpinner","deleted","reorganiseEditPage","newsummarks","newnumquestions","string","editMaxMarkCancel","keyCode","editMaxMarkSubmit","qtypeClass","getAttribute","match","allStrings","reorderSlots","reorderPageBreaks","reorderPages","updateOneSlotSections","updateAllDependencyIcons","nextActivity","nextElementSibling","matches","pageEl","page","SELECTORS","PAGE","reorganizeEditPage","editMaxMarkClear","removeEventListener","instructions","insertAdjacentHTML","removeChild","setTimeout","input","originalMaxMark","newMaxMark","trim","blur","actionArea"],"mappings":"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"}